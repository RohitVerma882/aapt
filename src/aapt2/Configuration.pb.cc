// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Configuration.proto

#include "Configuration.pb.h"

#include <algorithm>
#include <cstdint>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace aapt {
namespace pb {
PROTOBUF_CONSTEXPR Configuration::Configuration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mcc_)*/0u
  , /*decltype(_impl_.mnc_)*/0u
  , /*decltype(_impl_.layout_direction_)*/0
  , /*decltype(_impl_.screen_width_)*/0u
  , /*decltype(_impl_.screen_height_)*/0u
  , /*decltype(_impl_.screen_width_dp_)*/0u
  , /*decltype(_impl_.screen_height_dp_)*/0u
  , /*decltype(_impl_.smallest_screen_width_dp_)*/0u
  , /*decltype(_impl_.screen_layout_size_)*/0
  , /*decltype(_impl_.screen_layout_long_)*/0
  , /*decltype(_impl_.screen_round_)*/0
  , /*decltype(_impl_.wide_color_gamut_)*/0
  , /*decltype(_impl_.hdr_)*/0
  , /*decltype(_impl_.orientation_)*/0
  , /*decltype(_impl_.ui_mode_type_)*/0
  , /*decltype(_impl_.ui_mode_night_)*/0
  , /*decltype(_impl_.density_)*/0u
  , /*decltype(_impl_.touchscreen_)*/0
  , /*decltype(_impl_.keys_hidden_)*/0
  , /*decltype(_impl_.keyboard_)*/0
  , /*decltype(_impl_.nav_hidden_)*/0
  , /*decltype(_impl_.navigation_)*/0
  , /*decltype(_impl_.sdk_version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationDefaultTypeInternal _Configuration_default_instance_;
}  // namespace pb
}  // namespace aapt
static ::_pb::Metadata file_level_metadata_Configuration_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Configuration_2eproto[14];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Configuration_2eproto = nullptr;

const ::uint32_t TableStruct_Configuration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.mcc_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.mnc_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.layout_direction_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_width_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_height_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_width_dp_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_height_dp_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.smallest_screen_width_dp_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_layout_size_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_layout_long_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.screen_round_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.wide_color_gamut_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.hdr_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.ui_mode_type_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.ui_mode_night_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.density_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.touchscreen_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.keys_hidden_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.keyboard_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.nav_hidden_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.navigation_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.sdk_version_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Configuration, _impl_.product_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::aapt::pb::Configuration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::aapt::pb::_Configuration_default_instance_._instance,
};

const char descriptor_table_protodef_Configuration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Configuration.proto\022\007aapt.pb\"\331\024\n\rConfi"
  "guration\022\013\n\003mcc\030\001 \001(\r\022\013\n\003mnc\030\002 \001(\r\022\016\n\006lo"
  "cale\030\003 \001(\t\022@\n\020layout_direction\030\004 \001(\0162&.a"
  "apt.pb.Configuration.LayoutDirection\022\024\n\014"
  "screen_width\030\005 \001(\r\022\025\n\rscreen_height\030\006 \001("
  "\r\022\027\n\017screen_width_dp\030\007 \001(\r\022\030\n\020screen_hei"
  "ght_dp\030\010 \001(\r\022 \n\030smallest_screen_width_dp"
  "\030\t \001(\r\022C\n\022screen_layout_size\030\n \001(\0162\'.aap"
  "t.pb.Configuration.ScreenLayoutSize\022C\n\022s"
  "creen_layout_long\030\013 \001(\0162\'.aapt.pb.Config"
  "uration.ScreenLayoutLong\0228\n\014screen_round"
  "\030\014 \001(\0162\".aapt.pb.Configuration.ScreenRou"
  "nd\022\?\n\020wide_color_gamut\030\r \001(\0162%.aapt.pb.C"
  "onfiguration.WideColorGamut\022\'\n\003hdr\030\016 \001(\016"
  "2\032.aapt.pb.Configuration.Hdr\0227\n\013orientat"
  "ion\030\017 \001(\0162\".aapt.pb.Configuration.Orient"
  "ation\0227\n\014ui_mode_type\030\020 \001(\0162!.aapt.pb.Co"
  "nfiguration.UiModeType\0229\n\rui_mode_night\030"
  "\021 \001(\0162\".aapt.pb.Configuration.UiModeNigh"
  "t\022\017\n\007density\030\022 \001(\r\0227\n\013touchscreen\030\023 \001(\0162"
  "\".aapt.pb.Configuration.Touchscreen\0226\n\013k"
  "eys_hidden\030\024 \001(\0162!.aapt.pb.Configuration"
  ".KeysHidden\0221\n\010keyboard\030\025 \001(\0162\037.aapt.pb."
  "Configuration.Keyboard\0224\n\nnav_hidden\030\026 \001"
  "(\0162 .aapt.pb.Configuration.NavHidden\0225\n\n"
  "navigation\030\027 \001(\0162!.aapt.pb.Configuration"
  ".Navigation\022\023\n\013sdk_version\030\030 \001(\r\022\017\n\007prod"
  "uct\030\031 \001(\t\"a\n\017LayoutDirection\022\032\n\026LAYOUT_D"
  "IRECTION_UNSET\020\000\022\030\n\024LAYOUT_DIRECTION_LTR"
  "\020\001\022\030\n\024LAYOUT_DIRECTION_RTL\020\002\"\252\001\n\020ScreenL"
  "ayoutSize\022\034\n\030SCREEN_LAYOUT_SIZE_UNSET\020\000\022"
  "\034\n\030SCREEN_LAYOUT_SIZE_SMALL\020\001\022\035\n\031SCREEN_"
  "LAYOUT_SIZE_NORMAL\020\002\022\034\n\030SCREEN_LAYOUT_SI"
  "ZE_LARGE\020\003\022\035\n\031SCREEN_LAYOUT_SIZE_XLARGE\020"
  "\004\"m\n\020ScreenLayoutLong\022\034\n\030SCREEN_LAYOUT_L"
  "ONG_UNSET\020\000\022\033\n\027SCREEN_LAYOUT_LONG_LONG\020\001"
  "\022\036\n\032SCREEN_LAYOUT_LONG_NOTLONG\020\002\"X\n\013Scre"
  "enRound\022\026\n\022SCREEN_ROUND_UNSET\020\000\022\026\n\022SCREE"
  "N_ROUND_ROUND\020\001\022\031\n\025SCREEN_ROUND_NOTROUND"
  "\020\002\"h\n\016WideColorGamut\022\032\n\026WIDE_COLOR_GAMUT"
  "_UNSET\020\000\022\033\n\027WIDE_COLOR_GAMUT_WIDECG\020\001\022\035\n"
  "\031WIDE_COLOR_GAMUT_NOWIDECG\020\002\"3\n\003Hdr\022\r\n\tH"
  "DR_UNSET\020\000\022\016\n\nHDR_HIGHDR\020\001\022\r\n\tHDR_LOWDR\020"
  "\002\"h\n\013Orientation\022\025\n\021ORIENTATION_UNSET\020\000\022"
  "\024\n\020ORIENTATION_PORT\020\001\022\024\n\020ORIENTATION_LAN"
  "D\020\002\022\026\n\022ORIENTATION_SQUARE\020\003\"\327\001\n\nUiModeTy"
  "pe\022\026\n\022UI_MODE_TYPE_UNSET\020\000\022\027\n\023UI_MODE_TY"
  "PE_NORMAL\020\001\022\025\n\021UI_MODE_TYPE_DESK\020\002\022\024\n\020UI"
  "_MODE_TYPE_CAR\020\003\022\033\n\027UI_MODE_TYPE_TELEVIS"
  "ION\020\004\022\032\n\026UI_MODE_TYPE_APPLIANCE\020\005\022\026\n\022UI_"
  "MODE_TYPE_WATCH\020\006\022\032\n\026UI_MODE_TYPE_VRHEAD"
  "SET\020\007\"[\n\013UiModeNight\022\027\n\023UI_MODE_NIGHT_UN"
  "SET\020\000\022\027\n\023UI_MODE_NIGHT_NIGHT\020\001\022\032\n\026UI_MOD"
  "E_NIGHT_NOTNIGHT\020\002\"m\n\013Touchscreen\022\025\n\021TOU"
  "CHSCREEN_UNSET\020\000\022\027\n\023TOUCHSCREEN_NOTOUCH\020"
  "\001\022\026\n\022TOUCHSCREEN_STYLUS\020\002\022\026\n\022TOUCHSCREEN"
  "_FINGER\020\003\"v\n\nKeysHidden\022\025\n\021KEYS_HIDDEN_U"
  "NSET\020\000\022\033\n\027KEYS_HIDDEN_KEYSEXPOSED\020\001\022\032\n\026K"
  "EYS_HIDDEN_KEYSHIDDEN\020\002\022\030\n\024KEYS_HIDDEN_K"
  "EYSSOFT\020\003\"`\n\010Keyboard\022\022\n\016KEYBOARD_UNSET\020"
  "\000\022\023\n\017KEYBOARD_NOKEYS\020\001\022\023\n\017KEYBOARD_QWERT"
  "Y\020\002\022\026\n\022KEYBOARD_TWELVEKEY\020\003\"V\n\tNavHidden"
  "\022\024\n\020NAV_HIDDEN_UNSET\020\000\022\031\n\025NAV_HIDDEN_NAV"
  "EXPOSED\020\001\022\030\n\024NAV_HIDDEN_NAVHIDDEN\020\002\"}\n\nN"
  "avigation\022\024\n\020NAVIGATION_UNSET\020\000\022\024\n\020NAVIG"
  "ATION_NONAV\020\001\022\023\n\017NAVIGATION_DPAD\020\002\022\030\n\024NA"
  "VIGATION_TRACKBALL\020\003\022\024\n\020NAVIGATION_WHEEL"
  "\020\004B\022\n\020com.android.aaptb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Configuration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Configuration_2eproto = {
    false, false, 2710, descriptor_table_protodef_Configuration_2eproto,
    "Configuration.proto",
    &descriptor_table_Configuration_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_Configuration_2eproto::offsets,
    file_level_metadata_Configuration_2eproto, file_level_enum_descriptors_Configuration_2eproto,
    file_level_service_descriptors_Configuration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Configuration_2eproto_getter() {
  return &descriptor_table_Configuration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Configuration_2eproto(&descriptor_table_Configuration_2eproto);
namespace aapt {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_LayoutDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[0];
}
bool Configuration_LayoutDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_LayoutDirection Configuration::LAYOUT_DIRECTION_UNSET;
constexpr Configuration_LayoutDirection Configuration::LAYOUT_DIRECTION_LTR;
constexpr Configuration_LayoutDirection Configuration::LAYOUT_DIRECTION_RTL;
constexpr Configuration_LayoutDirection Configuration::LayoutDirection_MIN;
constexpr Configuration_LayoutDirection Configuration::LayoutDirection_MAX;
constexpr int Configuration::LayoutDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_ScreenLayoutSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[1];
}
bool Configuration_ScreenLayoutSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_ScreenLayoutSize Configuration::SCREEN_LAYOUT_SIZE_UNSET;
constexpr Configuration_ScreenLayoutSize Configuration::SCREEN_LAYOUT_SIZE_SMALL;
constexpr Configuration_ScreenLayoutSize Configuration::SCREEN_LAYOUT_SIZE_NORMAL;
constexpr Configuration_ScreenLayoutSize Configuration::SCREEN_LAYOUT_SIZE_LARGE;
constexpr Configuration_ScreenLayoutSize Configuration::SCREEN_LAYOUT_SIZE_XLARGE;
constexpr Configuration_ScreenLayoutSize Configuration::ScreenLayoutSize_MIN;
constexpr Configuration_ScreenLayoutSize Configuration::ScreenLayoutSize_MAX;
constexpr int Configuration::ScreenLayoutSize_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_ScreenLayoutLong_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[2];
}
bool Configuration_ScreenLayoutLong_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_ScreenLayoutLong Configuration::SCREEN_LAYOUT_LONG_UNSET;
constexpr Configuration_ScreenLayoutLong Configuration::SCREEN_LAYOUT_LONG_LONG;
constexpr Configuration_ScreenLayoutLong Configuration::SCREEN_LAYOUT_LONG_NOTLONG;
constexpr Configuration_ScreenLayoutLong Configuration::ScreenLayoutLong_MIN;
constexpr Configuration_ScreenLayoutLong Configuration::ScreenLayoutLong_MAX;
constexpr int Configuration::ScreenLayoutLong_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_ScreenRound_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[3];
}
bool Configuration_ScreenRound_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_ScreenRound Configuration::SCREEN_ROUND_UNSET;
constexpr Configuration_ScreenRound Configuration::SCREEN_ROUND_ROUND;
constexpr Configuration_ScreenRound Configuration::SCREEN_ROUND_NOTROUND;
constexpr Configuration_ScreenRound Configuration::ScreenRound_MIN;
constexpr Configuration_ScreenRound Configuration::ScreenRound_MAX;
constexpr int Configuration::ScreenRound_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_WideColorGamut_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[4];
}
bool Configuration_WideColorGamut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_WideColorGamut Configuration::WIDE_COLOR_GAMUT_UNSET;
constexpr Configuration_WideColorGamut Configuration::WIDE_COLOR_GAMUT_WIDECG;
constexpr Configuration_WideColorGamut Configuration::WIDE_COLOR_GAMUT_NOWIDECG;
constexpr Configuration_WideColorGamut Configuration::WideColorGamut_MIN;
constexpr Configuration_WideColorGamut Configuration::WideColorGamut_MAX;
constexpr int Configuration::WideColorGamut_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_Hdr_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[5];
}
bool Configuration_Hdr_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_Hdr Configuration::HDR_UNSET;
constexpr Configuration_Hdr Configuration::HDR_HIGHDR;
constexpr Configuration_Hdr Configuration::HDR_LOWDR;
constexpr Configuration_Hdr Configuration::Hdr_MIN;
constexpr Configuration_Hdr Configuration::Hdr_MAX;
constexpr int Configuration::Hdr_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_Orientation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[6];
}
bool Configuration_Orientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_Orientation Configuration::ORIENTATION_UNSET;
constexpr Configuration_Orientation Configuration::ORIENTATION_PORT;
constexpr Configuration_Orientation Configuration::ORIENTATION_LAND;
constexpr Configuration_Orientation Configuration::ORIENTATION_SQUARE;
constexpr Configuration_Orientation Configuration::Orientation_MIN;
constexpr Configuration_Orientation Configuration::Orientation_MAX;
constexpr int Configuration::Orientation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_UiModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[7];
}
bool Configuration_UiModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_UNSET;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_NORMAL;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_DESK;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_CAR;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_TELEVISION;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_APPLIANCE;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_WATCH;
constexpr Configuration_UiModeType Configuration::UI_MODE_TYPE_VRHEADSET;
constexpr Configuration_UiModeType Configuration::UiModeType_MIN;
constexpr Configuration_UiModeType Configuration::UiModeType_MAX;
constexpr int Configuration::UiModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_UiModeNight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[8];
}
bool Configuration_UiModeNight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_UiModeNight Configuration::UI_MODE_NIGHT_UNSET;
constexpr Configuration_UiModeNight Configuration::UI_MODE_NIGHT_NIGHT;
constexpr Configuration_UiModeNight Configuration::UI_MODE_NIGHT_NOTNIGHT;
constexpr Configuration_UiModeNight Configuration::UiModeNight_MIN;
constexpr Configuration_UiModeNight Configuration::UiModeNight_MAX;
constexpr int Configuration::UiModeNight_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_Touchscreen_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[9];
}
bool Configuration_Touchscreen_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_Touchscreen Configuration::TOUCHSCREEN_UNSET;
constexpr Configuration_Touchscreen Configuration::TOUCHSCREEN_NOTOUCH;
constexpr Configuration_Touchscreen Configuration::TOUCHSCREEN_STYLUS;
constexpr Configuration_Touchscreen Configuration::TOUCHSCREEN_FINGER;
constexpr Configuration_Touchscreen Configuration::Touchscreen_MIN;
constexpr Configuration_Touchscreen Configuration::Touchscreen_MAX;
constexpr int Configuration::Touchscreen_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_KeysHidden_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[10];
}
bool Configuration_KeysHidden_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_KeysHidden Configuration::KEYS_HIDDEN_UNSET;
constexpr Configuration_KeysHidden Configuration::KEYS_HIDDEN_KEYSEXPOSED;
constexpr Configuration_KeysHidden Configuration::KEYS_HIDDEN_KEYSHIDDEN;
constexpr Configuration_KeysHidden Configuration::KEYS_HIDDEN_KEYSSOFT;
constexpr Configuration_KeysHidden Configuration::KeysHidden_MIN;
constexpr Configuration_KeysHidden Configuration::KeysHidden_MAX;
constexpr int Configuration::KeysHidden_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_Keyboard_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[11];
}
bool Configuration_Keyboard_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_Keyboard Configuration::KEYBOARD_UNSET;
constexpr Configuration_Keyboard Configuration::KEYBOARD_NOKEYS;
constexpr Configuration_Keyboard Configuration::KEYBOARD_QWERTY;
constexpr Configuration_Keyboard Configuration::KEYBOARD_TWELVEKEY;
constexpr Configuration_Keyboard Configuration::Keyboard_MIN;
constexpr Configuration_Keyboard Configuration::Keyboard_MAX;
constexpr int Configuration::Keyboard_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_NavHidden_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[12];
}
bool Configuration_NavHidden_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_NavHidden Configuration::NAV_HIDDEN_UNSET;
constexpr Configuration_NavHidden Configuration::NAV_HIDDEN_NAVEXPOSED;
constexpr Configuration_NavHidden Configuration::NAV_HIDDEN_NAVHIDDEN;
constexpr Configuration_NavHidden Configuration::NavHidden_MIN;
constexpr Configuration_NavHidden Configuration::NavHidden_MAX;
constexpr int Configuration::NavHidden_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_Navigation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[13];
}
bool Configuration_Navigation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configuration_Navigation Configuration::NAVIGATION_UNSET;
constexpr Configuration_Navigation Configuration::NAVIGATION_NONAV;
constexpr Configuration_Navigation Configuration::NAVIGATION_DPAD;
constexpr Configuration_Navigation Configuration::NAVIGATION_TRACKBALL;
constexpr Configuration_Navigation Configuration::NAVIGATION_WHEEL;
constexpr Configuration_Navigation Configuration::Navigation_MIN;
constexpr Configuration_Navigation Configuration::Navigation_MAX;
constexpr int Configuration::Navigation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Configuration::_Internal {
 public:
};

Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configuration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locale_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.mcc_){}
    , decltype(_impl_.mnc_){}
    , decltype(_impl_.layout_direction_){}
    , decltype(_impl_.screen_width_){}
    , decltype(_impl_.screen_height_){}
    , decltype(_impl_.screen_width_dp_){}
    , decltype(_impl_.screen_height_dp_){}
    , decltype(_impl_.smallest_screen_width_dp_){}
    , decltype(_impl_.screen_layout_size_){}
    , decltype(_impl_.screen_layout_long_){}
    , decltype(_impl_.screen_round_){}
    , decltype(_impl_.wide_color_gamut_){}
    , decltype(_impl_.hdr_){}
    , decltype(_impl_.orientation_){}
    , decltype(_impl_.ui_mode_type_){}
    , decltype(_impl_.ui_mode_night_){}
    , decltype(_impl_.density_){}
    , decltype(_impl_.touchscreen_){}
    , decltype(_impl_.keys_hidden_){}
    , decltype(_impl_.keyboard_){}
    , decltype(_impl_.nav_hidden_){}
    , decltype(_impl_.navigation_){}
    , decltype(_impl_.sdk_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product().empty()) {
    _this->_impl_.product_.Set(from._internal_product(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mcc_, &from._impl_.mcc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sdk_version_) -
    reinterpret_cast<char*>(&_impl_.mcc_)) + sizeof(_impl_.sdk_version_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Configuration)
}

inline void Configuration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locale_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.mcc_){0u}
    , decltype(_impl_.mnc_){0u}
    , decltype(_impl_.layout_direction_){0}
    , decltype(_impl_.screen_width_){0u}
    , decltype(_impl_.screen_height_){0u}
    , decltype(_impl_.screen_width_dp_){0u}
    , decltype(_impl_.screen_height_dp_){0u}
    , decltype(_impl_.smallest_screen_width_dp_){0u}
    , decltype(_impl_.screen_layout_size_){0}
    , decltype(_impl_.screen_layout_long_){0}
    , decltype(_impl_.screen_round_){0}
    , decltype(_impl_.wide_color_gamut_){0}
    , decltype(_impl_.hdr_){0}
    , decltype(_impl_.orientation_){0}
    , decltype(_impl_.ui_mode_type_){0}
    , decltype(_impl_.ui_mode_night_){0}
    , decltype(_impl_.density_){0u}
    , decltype(_impl_.touchscreen_){0}
    , decltype(_impl_.keys_hidden_){0}
    , decltype(_impl_.keyboard_){0}
    , decltype(_impl_.nav_hidden_){0}
    , decltype(_impl_.navigation_){0}
    , decltype(_impl_.sdk_version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:aapt.pb.Configuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locale_.Destroy();
  _impl_.product_.Destroy();
}

void Configuration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Configuration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locale_.ClearToEmpty();
  _impl_.product_.ClearToEmpty();
  ::memset(&_impl_.mcc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sdk_version_) -
      reinterpret_cast<char*>(&_impl_.mcc_)) + sizeof(_impl_.sdk_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mcc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.mcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 mnc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.mnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string locale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Configuration.locale"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.LayoutDirection layout_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout_direction(static_cast<::aapt::pb::Configuration_LayoutDirection>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 screen_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.screen_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 screen_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.screen_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 screen_width_dp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.screen_width_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 screen_height_dp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.screen_height_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 smallest_screen_width_dp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.smallest_screen_width_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_screen_layout_size(static_cast<::aapt::pb::Configuration_ScreenLayoutSize>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_screen_layout_long(static_cast<::aapt::pb::Configuration_ScreenLayoutLong>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.ScreenRound screen_round = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_screen_round(static_cast<::aapt::pb::Configuration_ScreenRound>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wide_color_gamut(static_cast<::aapt::pb::Configuration_WideColorGamut>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.Hdr hdr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hdr(static_cast<::aapt::pb::Configuration_Hdr>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.Orientation orientation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_orientation(static_cast<::aapt::pb::Configuration_Orientation>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.UiModeType ui_mode_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ui_mode_type(static_cast<::aapt::pb::Configuration_UiModeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.UiModeNight ui_mode_night = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ui_mode_night(static_cast<::aapt::pb::Configuration_UiModeNight>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 density = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.Touchscreen touchscreen = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_touchscreen(static_cast<::aapt::pb::Configuration_Touchscreen>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.KeysHidden keys_hidden = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_keys_hidden(static_cast<::aapt::pb::Configuration_KeysHidden>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.Keyboard keyboard = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 168)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_keyboard(static_cast<::aapt::pb::Configuration_Keyboard>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.NavHidden nav_hidden = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nav_hidden(static_cast<::aapt::pb::Configuration_NavHidden>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration.Navigation navigation = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_navigation(static_cast<::aapt::pb::Configuration_Navigation>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 sdk_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          _impl_.sdk_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string product = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Configuration.product"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Configuration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Configuration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mcc = 1;
  if (this->_internal_mcc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mcc(), target);
  }

  // uint32 mnc = 2;
  if (this->_internal_mnc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mnc(), target);
  }

  // string locale = 3;
  if (!this->_internal_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Configuration.locale");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locale(), target);
  }

  // .aapt.pb.Configuration.LayoutDirection layout_direction = 4;
  if (this->_internal_layout_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_layout_direction(), target);
  }

  // uint32 screen_width = 5;
  if (this->_internal_screen_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_screen_width(), target);
  }

  // uint32 screen_height = 6;
  if (this->_internal_screen_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_screen_height(), target);
  }

  // uint32 screen_width_dp = 7;
  if (this->_internal_screen_width_dp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_screen_width_dp(), target);
  }

  // uint32 screen_height_dp = 8;
  if (this->_internal_screen_height_dp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_screen_height_dp(), target);
  }

  // uint32 smallest_screen_width_dp = 9;
  if (this->_internal_smallest_screen_width_dp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_smallest_screen_width_dp(), target);
  }

  // .aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;
  if (this->_internal_screen_layout_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_screen_layout_size(), target);
  }

  // .aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;
  if (this->_internal_screen_layout_long() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_screen_layout_long(), target);
  }

  // .aapt.pb.Configuration.ScreenRound screen_round = 12;
  if (this->_internal_screen_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_screen_round(), target);
  }

  // .aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;
  if (this->_internal_wide_color_gamut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_wide_color_gamut(), target);
  }

  // .aapt.pb.Configuration.Hdr hdr = 14;
  if (this->_internal_hdr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_hdr(), target);
  }

  // .aapt.pb.Configuration.Orientation orientation = 15;
  if (this->_internal_orientation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_orientation(), target);
  }

  // .aapt.pb.Configuration.UiModeType ui_mode_type = 16;
  if (this->_internal_ui_mode_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_ui_mode_type(), target);
  }

  // .aapt.pb.Configuration.UiModeNight ui_mode_night = 17;
  if (this->_internal_ui_mode_night() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_ui_mode_night(), target);
  }

  // uint32 density = 18;
  if (this->_internal_density() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_density(), target);
  }

  // .aapt.pb.Configuration.Touchscreen touchscreen = 19;
  if (this->_internal_touchscreen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_touchscreen(), target);
  }

  // .aapt.pb.Configuration.KeysHidden keys_hidden = 20;
  if (this->_internal_keys_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_keys_hidden(), target);
  }

  // .aapt.pb.Configuration.Keyboard keyboard = 21;
  if (this->_internal_keyboard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_keyboard(), target);
  }

  // .aapt.pb.Configuration.NavHidden nav_hidden = 22;
  if (this->_internal_nav_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_nav_hidden(), target);
  }

  // .aapt.pb.Configuration.Navigation navigation = 23;
  if (this->_internal_navigation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_navigation(), target);
  }

  // uint32 sdk_version = 24;
  if (this->_internal_sdk_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_sdk_version(), target);
  }

  // string product = 25;
  if (!this->_internal_product().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Configuration.product");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_product(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Configuration)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string locale = 3;
  if (!this->_internal_locale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string product = 25;
  if (!this->_internal_product().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // uint32 mcc = 1;
  if (this->_internal_mcc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mcc());
  }

  // uint32 mnc = 2;
  if (this->_internal_mnc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mnc());
  }

  // .aapt.pb.Configuration.LayoutDirection layout_direction = 4;
  if (this->_internal_layout_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_layout_direction());
  }

  // uint32 screen_width = 5;
  if (this->_internal_screen_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_screen_width());
  }

  // uint32 screen_height = 6;
  if (this->_internal_screen_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_screen_height());
  }

  // uint32 screen_width_dp = 7;
  if (this->_internal_screen_width_dp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_screen_width_dp());
  }

  // uint32 screen_height_dp = 8;
  if (this->_internal_screen_height_dp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_screen_height_dp());
  }

  // uint32 smallest_screen_width_dp = 9;
  if (this->_internal_smallest_screen_width_dp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_smallest_screen_width_dp());
  }

  // .aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;
  if (this->_internal_screen_layout_size() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_screen_layout_size());
  }

  // .aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;
  if (this->_internal_screen_layout_long() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_screen_layout_long());
  }

  // .aapt.pb.Configuration.ScreenRound screen_round = 12;
  if (this->_internal_screen_round() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_screen_round());
  }

  // .aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;
  if (this->_internal_wide_color_gamut() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wide_color_gamut());
  }

  // .aapt.pb.Configuration.Hdr hdr = 14;
  if (this->_internal_hdr() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hdr());
  }

  // .aapt.pb.Configuration.Orientation orientation = 15;
  if (this->_internal_orientation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_orientation());
  }

  // .aapt.pb.Configuration.UiModeType ui_mode_type = 16;
  if (this->_internal_ui_mode_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ui_mode_type());
  }

  // .aapt.pb.Configuration.UiModeNight ui_mode_night = 17;
  if (this->_internal_ui_mode_night() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ui_mode_night());
  }

  // uint32 density = 18;
  if (this->_internal_density() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_density());
  }

  // .aapt.pb.Configuration.Touchscreen touchscreen = 19;
  if (this->_internal_touchscreen() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_touchscreen());
  }

  // .aapt.pb.Configuration.KeysHidden keys_hidden = 20;
  if (this->_internal_keys_hidden() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_keys_hidden());
  }

  // .aapt.pb.Configuration.Keyboard keyboard = 21;
  if (this->_internal_keyboard() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_keyboard());
  }

  // .aapt.pb.Configuration.NavHidden nav_hidden = 22;
  if (this->_internal_nav_hidden() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_nav_hidden());
  }

  // .aapt.pb.Configuration.Navigation navigation = 23;
  if (this->_internal_navigation() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_navigation());
  }

  // uint32 sdk_version = 24;
  if (this->_internal_sdk_version() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sdk_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configuration::GetClassData() const { return &_class_data_; }


void Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configuration*>(&to_msg);
  auto& from = static_cast<const Configuration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Configuration)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_locale().empty()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (!from._internal_product().empty()) {
    _this->_internal_set_product(from._internal_product());
  }
  if (from._internal_mcc() != 0) {
    _this->_internal_set_mcc(from._internal_mcc());
  }
  if (from._internal_mnc() != 0) {
    _this->_internal_set_mnc(from._internal_mnc());
  }
  if (from._internal_layout_direction() != 0) {
    _this->_internal_set_layout_direction(from._internal_layout_direction());
  }
  if (from._internal_screen_width() != 0) {
    _this->_internal_set_screen_width(from._internal_screen_width());
  }
  if (from._internal_screen_height() != 0) {
    _this->_internal_set_screen_height(from._internal_screen_height());
  }
  if (from._internal_screen_width_dp() != 0) {
    _this->_internal_set_screen_width_dp(from._internal_screen_width_dp());
  }
  if (from._internal_screen_height_dp() != 0) {
    _this->_internal_set_screen_height_dp(from._internal_screen_height_dp());
  }
  if (from._internal_smallest_screen_width_dp() != 0) {
    _this->_internal_set_smallest_screen_width_dp(from._internal_smallest_screen_width_dp());
  }
  if (from._internal_screen_layout_size() != 0) {
    _this->_internal_set_screen_layout_size(from._internal_screen_layout_size());
  }
  if (from._internal_screen_layout_long() != 0) {
    _this->_internal_set_screen_layout_long(from._internal_screen_layout_long());
  }
  if (from._internal_screen_round() != 0) {
    _this->_internal_set_screen_round(from._internal_screen_round());
  }
  if (from._internal_wide_color_gamut() != 0) {
    _this->_internal_set_wide_color_gamut(from._internal_wide_color_gamut());
  }
  if (from._internal_hdr() != 0) {
    _this->_internal_set_hdr(from._internal_hdr());
  }
  if (from._internal_orientation() != 0) {
    _this->_internal_set_orientation(from._internal_orientation());
  }
  if (from._internal_ui_mode_type() != 0) {
    _this->_internal_set_ui_mode_type(from._internal_ui_mode_type());
  }
  if (from._internal_ui_mode_night() != 0) {
    _this->_internal_set_ui_mode_night(from._internal_ui_mode_night());
  }
  if (from._internal_density() != 0) {
    _this->_internal_set_density(from._internal_density());
  }
  if (from._internal_touchscreen() != 0) {
    _this->_internal_set_touchscreen(from._internal_touchscreen());
  }
  if (from._internal_keys_hidden() != 0) {
    _this->_internal_set_keys_hidden(from._internal_keys_hidden());
  }
  if (from._internal_keyboard() != 0) {
    _this->_internal_set_keyboard(from._internal_keyboard());
  }
  if (from._internal_nav_hidden() != 0) {
    _this->_internal_set_nav_hidden(from._internal_nav_hidden());
  }
  if (from._internal_navigation() != 0) {
    _this->_internal_set_navigation(from._internal_navigation());
  }
  if (from._internal_sdk_version() != 0) {
    _this->_internal_set_sdk_version(from._internal_sdk_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_, lhs_arena,
      &other->_impl_.product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configuration, _impl_.sdk_version_)
      + sizeof(Configuration::_impl_.sdk_version_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Configuration, _impl_.mcc_)>(
          reinterpret_cast<char*>(&_impl_.mcc_),
          reinterpret_cast<char*>(&other->_impl_.mcc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Configuration_2eproto_getter, &descriptor_table_Configuration_2eproto_once,
      file_level_metadata_Configuration_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace aapt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aapt::pb::Configuration*
Arena::CreateMaybeMessage< ::aapt::pb::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Configuration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
