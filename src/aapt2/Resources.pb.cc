// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Resources.proto

#include "Resources.pb.h"

#include <algorithm>
#include <cstdint>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace aapt {
namespace pb {
PROTOBUF_CONSTEXPR StringPool::StringPool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringPoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringPoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringPoolDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    StringPool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringPoolDefaultTypeInternal _StringPool_default_instance_;
PROTOBUF_CONSTEXPR SourcePosition::SourcePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_number_)*/0u
  , /*decltype(_impl_.column_number_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourcePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourcePositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourcePositionDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    SourcePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourcePositionDefaultTypeInternal _SourcePosition_default_instance_;
PROTOBUF_CONSTEXPR Source::Source(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.path_idx_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Source _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
PROTOBUF_CONSTEXPR ToolFingerprint::ToolFingerprint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolFingerprintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolFingerprintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolFingerprintDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    ToolFingerprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolFingerprintDefaultTypeInternal _ToolFingerprint_default_instance_;
PROTOBUF_CONSTEXPR ResourceTable::ResourceTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.package_)*/{}
  , /*decltype(_impl_.overlayable_)*/{}
  , /*decltype(_impl_.tool_fingerprint_)*/{}
  , /*decltype(_impl_.source_pool_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceTableDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    ResourceTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceTableDefaultTypeInternal _ResourceTable_default_instance_;
PROTOBUF_CONSTEXPR PackageId::PackageId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PackageIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageIdDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    PackageId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageIdDefaultTypeInternal _PackageId_default_instance_;
PROTOBUF_CONSTEXPR Package::Package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PackageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Package _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageDefaultTypeInternal _Package_default_instance_;
PROTOBUF_CONSTEXPR TypeId::TypeId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypeIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeIdDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    TypeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeIdDefaultTypeInternal _TypeId_default_instance_;
PROTOBUF_CONSTEXPR Type::Type(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Type _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeDefaultTypeInternal _Type_default_instance_;
PROTOBUF_CONSTEXPR Visibility::Visibility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisibilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisibilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisibilityDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Visibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisibilityDefaultTypeInternal _Visibility_default_instance_;
PROTOBUF_CONSTEXPR AllowNew::AllowNew(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllowNewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowNewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowNewDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    AllowNew _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowNewDefaultTypeInternal _AllowNew_default_instance_;
PROTOBUF_CONSTEXPR Overlayable::Overlayable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.actor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverlayableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlayableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlayableDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Overlayable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlayableDefaultTypeInternal _Overlayable_default_instance_;
PROTOBUF_CONSTEXPR OverlayableItem::OverlayableItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.policy_)*/{}
  , /*decltype(_impl_._policy_cached_byte_size_)*/{0}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.overlayable_idx_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverlayableItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlayableItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlayableItemDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    OverlayableItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlayableItemDefaultTypeInternal _OverlayableItem_default_instance_;
PROTOBUF_CONSTEXPR EntryId::EntryId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntryIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryIdDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    EntryId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryIdDefaultTypeInternal _EntryId_default_instance_;
PROTOBUF_CONSTEXPR Entry::Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_value_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entry_id_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.allow_new_)*/nullptr
  , /*decltype(_impl_.overlayable_item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryDefaultTypeInternal _Entry_default_instance_;
PROTOBUF_CONSTEXPR ConfigValue::ConfigValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigValueDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    ConfigValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigValueDefaultTypeInternal _ConfigValue_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.weak_)*/false
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR CompoundValue::CompoundValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CompoundValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompoundValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompoundValueDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    CompoundValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompoundValueDefaultTypeInternal _CompoundValue_default_instance_;
PROTOBUF_CONSTEXPR Boolean::Boolean(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BooleanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Boolean _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanDefaultTypeInternal _Boolean_default_instance_;
PROTOBUF_CONSTEXPR Reference::Reference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_dynamic_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.private__)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceDefaultTypeInternal _Reference_default_instance_;
PROTOBUF_CONSTEXPR Id::Id(
    ::_pbi::ConstantInitialized) {}
struct IdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Id _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdDefaultTypeInternal _Id_default_instance_;
PROTOBUF_CONSTEXPR String::String(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringDefaultTypeInternal _String_default_instance_;
PROTOBUF_CONSTEXPR RawString::RawString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RawStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawStringDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    RawString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawStringDefaultTypeInternal _RawString_default_instance_;
PROTOBUF_CONSTEXPR StyledString_Span::StyledString_Span(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.first_char_)*/0u
  , /*decltype(_impl_.last_char_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StyledString_SpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyledString_SpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyledString_SpanDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    StyledString_Span _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyledString_SpanDefaultTypeInternal _StyledString_Span_default_instance_;
PROTOBUF_CONSTEXPR StyledString::StyledString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.span_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StyledStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyledStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyledStringDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    StyledString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyledStringDefaultTypeInternal _StyledString_default_instance_;
PROTOBUF_CONSTEXPR FileReference::FileReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileReferenceDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    FileReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileReferenceDefaultTypeInternal _FileReference_default_instance_;
PROTOBUF_CONSTEXPR Primitive_NullType::Primitive_NullType(
    ::_pbi::ConstantInitialized) {}
struct Primitive_NullTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Primitive_NullTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Primitive_NullTypeDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Primitive_NullType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Primitive_NullTypeDefaultTypeInternal _Primitive_NullType_default_instance_;
PROTOBUF_CONSTEXPR Primitive_EmptyType::Primitive_EmptyType(
    ::_pbi::ConstantInitialized) {}
struct Primitive_EmptyTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Primitive_EmptyTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Primitive_EmptyTypeDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Primitive_EmptyType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Primitive_EmptyTypeDefaultTypeInternal _Primitive_EmptyType_default_instance_;
PROTOBUF_CONSTEXPR Primitive::Primitive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oneof_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Primitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveDefaultTypeInternal _Primitive_default_instance_;
PROTOBUF_CONSTEXPR Attribute_Symbol::Attribute_Symbol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.name_)*/nullptr
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Attribute_SymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Attribute_SymbolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Attribute_SymbolDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Attribute_Symbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Attribute_SymbolDefaultTypeInternal _Attribute_Symbol_default_instance_;
PROTOBUF_CONSTEXPR Attribute::Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/{}
  , /*decltype(_impl_.format_flags_)*/0u
  , /*decltype(_impl_.min_int_)*/0
  , /*decltype(_impl_.max_int_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeDefaultTypeInternal _Attribute_default_instance_;
PROTOBUF_CONSTEXPR Style_Entry::Style_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Style_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Style_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Style_EntryDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Style_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Style_EntryDefaultTypeInternal _Style_Entry_default_instance_;
PROTOBUF_CONSTEXPR Style::Style(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.parent_source_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Style _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleDefaultTypeInternal _Style_default_instance_;
PROTOBUF_CONSTEXPR Styleable_Entry::Styleable_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.attr_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Styleable_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Styleable_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Styleable_EntryDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Styleable_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Styleable_EntryDefaultTypeInternal _Styleable_Entry_default_instance_;
PROTOBUF_CONSTEXPR Styleable::Styleable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StyleableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleableDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Styleable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleableDefaultTypeInternal _Styleable_default_instance_;
PROTOBUF_CONSTEXPR Array_Element::Array_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Array_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Array_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Array_ElementDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Array_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Array_ElementDefaultTypeInternal _Array_Element_default_instance_;
PROTOBUF_CONSTEXPR Array::Array(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrayDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrayDefaultTypeInternal _Array_default_instance_;
PROTOBUF_CONSTEXPR Plural_Entry::Plural_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.arity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Plural_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Plural_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Plural_EntryDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Plural_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Plural_EntryDefaultTypeInternal _Plural_Entry_default_instance_;
PROTOBUF_CONSTEXPR Plural::Plural(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PluralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PluralDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PluralDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    Plural _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PluralDefaultTypeInternal _Plural_default_instance_;
PROTOBUF_CONSTEXPR XmlNode::XmlNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct XmlNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XmlNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XmlNodeDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    XmlNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XmlNodeDefaultTypeInternal _XmlNode_default_instance_;
PROTOBUF_CONSTEXPR XmlElement::XmlElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.namespace_declaration_)*/{}
  , /*decltype(_impl_.attribute_)*/{}
  , /*decltype(_impl_.child_)*/{}
  , /*decltype(_impl_.namespace_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XmlElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XmlElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XmlElementDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    XmlElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XmlElementDefaultTypeInternal _XmlElement_default_instance_;
PROTOBUF_CONSTEXPR XmlNamespace::XmlNamespace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XmlNamespaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XmlNamespaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XmlNamespaceDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    XmlNamespace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XmlNamespaceDefaultTypeInternal _XmlNamespace_default_instance_;
PROTOBUF_CONSTEXPR XmlAttribute::XmlAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.namespace_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.compiled_item_)*/nullptr
  , /*decltype(_impl_.resource_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XmlAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XmlAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XmlAttributeDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    XmlAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XmlAttributeDefaultTypeInternal _XmlAttribute_default_instance_;
}  // namespace pb
}  // namespace aapt
static ::_pb::Metadata file_level_metadata_Resources_2eproto[44];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Resources_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Resources_2eproto = nullptr;

const ::uint32_t TableStruct_Resources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StringPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StringPool, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::SourcePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::SourcePosition, _impl_.line_number_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::SourcePosition, _impl_.column_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Source, _impl_.path_idx_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Source, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ToolFingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ToolFingerprint, _impl_.tool_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ToolFingerprint, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, _impl_.source_pool_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, _impl_.package_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, _impl_.overlayable_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, _impl_.tool_fingerprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::PackageId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::PackageId, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, _impl_.package_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, _impl_.package_name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::TypeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::TypeId, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, _impl_.type_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, _impl_.comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::AllowNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::AllowNew, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::AllowNew, _impl_.comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, _impl_.actor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, _impl_.policy_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, _impl_.overlayable_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::EntryId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::EntryId, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _impl_.entry_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _impl_.allow_new_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _impl_.overlayable_item_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _impl_.config_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ConfigValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ConfigValue, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ConfigValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _impl_.weak_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Item, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Item, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::CompoundValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::CompoundValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aapt::pb::CompoundValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Boolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Boolean, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _impl_.private__),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _impl_.is_dynamic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::String, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::RawString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::RawString, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, _impl_.first_char_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, _impl_.last_char_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString, _impl_.span_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::FileReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::FileReference, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::FileReference, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive_NullType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive_EmptyType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive, _impl_.oneof_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, _impl_.format_flags_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, _impl_.min_int_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, _impl_.max_int_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, _impl_.symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, _impl_.parent_source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, _impl_.attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array, _impl_.element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, _impl_.arity_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, _impl_.node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _impl_.namespace_declaration_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _impl_.namespace_uri_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _impl_.child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, _impl_.prefix_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, _impl_.source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _impl_.namespace_uri_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _impl_.resource_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _impl_.compiled_item_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::aapt::pb::StringPool)},
  { 7, -1, -1, sizeof(::aapt::pb::SourcePosition)},
  { 15, -1, -1, sizeof(::aapt::pb::Source)},
  { 23, -1, -1, sizeof(::aapt::pb::ToolFingerprint)},
  { 31, -1, -1, sizeof(::aapt::pb::ResourceTable)},
  { 41, -1, -1, sizeof(::aapt::pb::PackageId)},
  { 48, -1, -1, sizeof(::aapt::pb::Package)},
  { 57, -1, -1, sizeof(::aapt::pb::TypeId)},
  { 64, -1, -1, sizeof(::aapt::pb::Type)},
  { 73, -1, -1, sizeof(::aapt::pb::Visibility)},
  { 82, -1, -1, sizeof(::aapt::pb::AllowNew)},
  { 90, -1, -1, sizeof(::aapt::pb::Overlayable)},
  { 99, -1, -1, sizeof(::aapt::pb::OverlayableItem)},
  { 109, -1, -1, sizeof(::aapt::pb::EntryId)},
  { 116, -1, -1, sizeof(::aapt::pb::Entry)},
  { 128, -1, -1, sizeof(::aapt::pb::ConfigValue)},
  { 136, -1, -1, sizeof(::aapt::pb::Value)},
  { 148, -1, -1, sizeof(::aapt::pb::Item)},
  { 162, -1, -1, sizeof(::aapt::pb::CompoundValue)},
  { 174, -1, -1, sizeof(::aapt::pb::Boolean)},
  { 181, -1, -1, sizeof(::aapt::pb::Reference)},
  { 192, -1, -1, sizeof(::aapt::pb::Id)},
  { 198, -1, -1, sizeof(::aapt::pb::String)},
  { 205, -1, -1, sizeof(::aapt::pb::RawString)},
  { 212, -1, -1, sizeof(::aapt::pb::StyledString_Span)},
  { 221, -1, -1, sizeof(::aapt::pb::StyledString)},
  { 229, -1, -1, sizeof(::aapt::pb::FileReference)},
  { 237, -1, -1, sizeof(::aapt::pb::Primitive_NullType)},
  { 243, -1, -1, sizeof(::aapt::pb::Primitive_EmptyType)},
  { 249, -1, -1, sizeof(::aapt::pb::Primitive)},
  { 270, -1, -1, sizeof(::aapt::pb::Attribute_Symbol)},
  { 281, -1, -1, sizeof(::aapt::pb::Attribute)},
  { 291, -1, -1, sizeof(::aapt::pb::Style_Entry)},
  { 301, -1, -1, sizeof(::aapt::pb::Style)},
  { 310, -1, -1, sizeof(::aapt::pb::Styleable_Entry)},
  { 319, -1, -1, sizeof(::aapt::pb::Styleable)},
  { 326, -1, -1, sizeof(::aapt::pb::Array_Element)},
  { 335, -1, -1, sizeof(::aapt::pb::Array)},
  { 342, -1, -1, sizeof(::aapt::pb::Plural_Entry)},
  { 352, -1, -1, sizeof(::aapt::pb::Plural)},
  { 359, -1, -1, sizeof(::aapt::pb::XmlNode)},
  { 369, -1, -1, sizeof(::aapt::pb::XmlElement)},
  { 380, -1, -1, sizeof(::aapt::pb::XmlNamespace)},
  { 389, -1, -1, sizeof(::aapt::pb::XmlAttribute)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::aapt::pb::_StringPool_default_instance_._instance,
  &::aapt::pb::_SourcePosition_default_instance_._instance,
  &::aapt::pb::_Source_default_instance_._instance,
  &::aapt::pb::_ToolFingerprint_default_instance_._instance,
  &::aapt::pb::_ResourceTable_default_instance_._instance,
  &::aapt::pb::_PackageId_default_instance_._instance,
  &::aapt::pb::_Package_default_instance_._instance,
  &::aapt::pb::_TypeId_default_instance_._instance,
  &::aapt::pb::_Type_default_instance_._instance,
  &::aapt::pb::_Visibility_default_instance_._instance,
  &::aapt::pb::_AllowNew_default_instance_._instance,
  &::aapt::pb::_Overlayable_default_instance_._instance,
  &::aapt::pb::_OverlayableItem_default_instance_._instance,
  &::aapt::pb::_EntryId_default_instance_._instance,
  &::aapt::pb::_Entry_default_instance_._instance,
  &::aapt::pb::_ConfigValue_default_instance_._instance,
  &::aapt::pb::_Value_default_instance_._instance,
  &::aapt::pb::_Item_default_instance_._instance,
  &::aapt::pb::_CompoundValue_default_instance_._instance,
  &::aapt::pb::_Boolean_default_instance_._instance,
  &::aapt::pb::_Reference_default_instance_._instance,
  &::aapt::pb::_Id_default_instance_._instance,
  &::aapt::pb::_String_default_instance_._instance,
  &::aapt::pb::_RawString_default_instance_._instance,
  &::aapt::pb::_StyledString_Span_default_instance_._instance,
  &::aapt::pb::_StyledString_default_instance_._instance,
  &::aapt::pb::_FileReference_default_instance_._instance,
  &::aapt::pb::_Primitive_NullType_default_instance_._instance,
  &::aapt::pb::_Primitive_EmptyType_default_instance_._instance,
  &::aapt::pb::_Primitive_default_instance_._instance,
  &::aapt::pb::_Attribute_Symbol_default_instance_._instance,
  &::aapt::pb::_Attribute_default_instance_._instance,
  &::aapt::pb::_Style_Entry_default_instance_._instance,
  &::aapt::pb::_Style_default_instance_._instance,
  &::aapt::pb::_Styleable_Entry_default_instance_._instance,
  &::aapt::pb::_Styleable_default_instance_._instance,
  &::aapt::pb::_Array_Element_default_instance_._instance,
  &::aapt::pb::_Array_default_instance_._instance,
  &::aapt::pb::_Plural_Entry_default_instance_._instance,
  &::aapt::pb::_Plural_default_instance_._instance,
  &::aapt::pb::_XmlNode_default_instance_._instance,
  &::aapt::pb::_XmlElement_default_instance_._instance,
  &::aapt::pb::_XmlNamespace_default_instance_._instance,
  &::aapt::pb::_XmlAttribute_default_instance_._instance,
};

const char descriptor_table_protodef_Resources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Resources.proto\022\007aapt.pb\032\023Configuratio"
  "n.proto\"\032\n\nStringPool\022\014\n\004data\030\001 \001(\014\"<\n\016S"
  "ourcePosition\022\023\n\013line_number\030\001 \001(\r\022\025\n\rco"
  "lumn_number\030\002 \001(\r\"E\n\006Source\022\020\n\010path_idx\030"
  "\001 \001(\r\022)\n\010position\030\002 \001(\0132\027.aapt.pb.Source"
  "Position\"0\n\017ToolFingerprint\022\014\n\004tool\030\001 \001("
  "\t\022\017\n\007version\030\002 \001(\t\"\273\001\n\rResourceTable\022(\n\013"
  "source_pool\030\001 \001(\0132\023.aapt.pb.StringPool\022!"
  "\n\007package\030\002 \003(\0132\020.aapt.pb.Package\022)\n\013ove"
  "rlayable\030\003 \003(\0132\024.aapt.pb.Overlayable\0222\n\020"
  "tool_fingerprint\030\004 \003(\0132\030.aapt.pb.ToolFin"
  "gerprint\"\027\n\tPackageId\022\n\n\002id\030\001 \001(\r\"d\n\007Pac"
  "kage\022&\n\npackage_id\030\001 \001(\0132\022.aapt.pb.Packa"
  "geId\022\024\n\014package_name\030\002 \001(\t\022\033\n\004type\030\003 \003(\013"
  "2\r.aapt.pb.Type\"\024\n\006TypeId\022\n\n\002id\030\001 \001(\r\"U\n"
  "\004Type\022 \n\007type_id\030\001 \001(\0132\017.aapt.pb.TypeId\022"
  "\014\n\004name\030\002 \001(\t\022\035\n\005entry\030\003 \003(\0132\016.aapt.pb.E"
  "ntry\"\227\001\n\nVisibility\022(\n\005level\030\001 \001(\0162\031.aap"
  "t.pb.Visibility.Level\022\037\n\006source\030\002 \001(\0132\017."
  "aapt.pb.Source\022\017\n\007comment\030\003 \001(\t\"-\n\005Level"
  "\022\013\n\007UNKNOWN\020\000\022\013\n\007PRIVATE\020\001\022\n\n\006PUBLIC\020\002\"<"
  "\n\010AllowNew\022\037\n\006source\030\001 \001(\0132\017.aapt.pb.Sou"
  "rce\022\017\n\007comment\030\002 \001(\t\"K\n\013Overlayable\022\014\n\004n"
  "ame\030\001 \001(\t\022\037\n\006source\030\002 \001(\0132\017.aapt.pb.Sour"
  "ce\022\r\n\005actor\030\003 \001(\t\"\225\002\n\017OverlayableItem\022\037\n"
  "\006source\030\001 \001(\0132\017.aapt.pb.Source\022\017\n\007commen"
  "t\030\002 \001(\t\022/\n\006policy\030\003 \003(\0162\037.aapt.pb.Overla"
  "yableItem.Policy\022\027\n\017overlayable_idx\030\004 \001("
  "\r\"\205\001\n\006Policy\022\010\n\004NONE\020\000\022\n\n\006PUBLIC\020\001\022\n\n\006SY"
  "STEM\020\002\022\n\n\006VENDOR\020\003\022\013\n\007PRODUCT\020\004\022\r\n\tSIGNA"
  "TURE\020\005\022\007\n\003ODM\020\006\022\007\n\003OEM\020\007\022\t\n\005ACTOR\020\010\022\024\n\020C"
  "ONFIG_SIGNATURE\020\t\"\025\n\007EntryId\022\n\n\002id\030\001 \001(\r"
  "\"\350\001\n\005Entry\022\"\n\010entry_id\030\001 \001(\0132\020.aapt.pb.E"
  "ntryId\022\014\n\004name\030\002 \001(\t\022\'\n\nvisibility\030\003 \001(\013"
  "2\023.aapt.pb.Visibility\022$\n\tallow_new\030\004 \001(\013"
  "2\021.aapt.pb.AllowNew\0222\n\020overlayable_item\030"
  "\005 \001(\0132\030.aapt.pb.OverlayableItem\022*\n\014confi"
  "g_value\030\006 \003(\0132\024.aapt.pb.ConfigValue\"T\n\013C"
  "onfigValue\022&\n\006config\030\001 \001(\0132\026.aapt.pb.Con"
  "figuration\022\035\n\005value\030\002 \001(\0132\016.aapt.pb.Valu"
  "e\"\241\001\n\005Value\022\037\n\006source\030\001 \001(\0132\017.aapt.pb.So"
  "urce\022\017\n\007comment\030\002 \001(\t\022\014\n\004weak\030\003 \001(\010\022\035\n\004i"
  "tem\030\004 \001(\0132\r.aapt.pb.ItemH\000\0220\n\016compound_v"
  "alue\030\005 \001(\0132\026.aapt.pb.CompoundValueH\000B\007\n\005"
  "value\"\215\002\n\004Item\022!\n\003ref\030\001 \001(\0132\022.aapt.pb.Re"
  "ferenceH\000\022\036\n\003str\030\002 \001(\0132\017.aapt.pb.StringH"
  "\000\022%\n\007raw_str\030\003 \001(\0132\022.aapt.pb.RawStringH\000"
  "\022+\n\nstyled_str\030\004 \001(\0132\025.aapt.pb.StyledStr"
  "ingH\000\022&\n\004file\030\005 \001(\0132\026.aapt.pb.FileRefere"
  "nceH\000\022\031\n\002id\030\006 \001(\0132\013.aapt.pb.IdH\000\022\"\n\004prim"
  "\030\007 \001(\0132\022.aapt.pb.PrimitiveH\000B\007\n\005value\"\312\001"
  "\n\rCompoundValue\022\"\n\004attr\030\001 \001(\0132\022.aapt.pb."
  "AttributeH\000\022\037\n\005style\030\002 \001(\0132\016.aapt.pb.Sty"
  "leH\000\022\'\n\tstyleable\030\003 \001(\0132\022.aapt.pb.Stylea"
  "bleH\000\022\037\n\005array\030\004 \001(\0132\016.aapt.pb.ArrayH\000\022!"
  "\n\006plural\030\005 \001(\0132\017.aapt.pb.PluralH\000B\007\n\005val"
  "ue\"\030\n\007Boolean\022\r\n\005value\030\001 \001(\010\"\251\001\n\tReferen"
  "ce\022%\n\004type\030\001 \001(\0162\027.aapt.pb.Reference.Typ"
  "e\022\n\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\017\n\007private\030\004"
  " \001(\010\022$\n\nis_dynamic\030\005 \001(\0132\020.aapt.pb.Boole"
  "an\"$\n\004Type\022\r\n\tREFERENCE\020\000\022\r\n\tATTRIBUTE\020\001"
  "\"\004\n\002Id\"\027\n\006String\022\r\n\005value\030\001 \001(\t\"\032\n\tRawSt"
  "ring\022\r\n\005value\030\001 \001(\t\"\203\001\n\014StyledString\022\r\n\005"
  "value\030\001 \001(\t\022(\n\004span\030\002 \003(\0132\032.aapt.pb.Styl"
  "edString.Span\032:\n\004Span\022\013\n\003tag\030\001 \001(\t\022\022\n\nfi"
  "rst_char\030\002 \001(\r\022\021\n\tlast_char\030\003 \001(\r\"\205\001\n\rFi"
  "leReference\022\014\n\004path\030\001 \001(\t\022)\n\004type\030\002 \001(\0162"
  "\033.aapt.pb.FileReference.Type\";\n\004Type\022\013\n\007"
  "UNKNOWN\020\000\022\007\n\003PNG\020\001\022\016\n\nBINARY_XML\020\002\022\r\n\tPR"
  "OTO_XML\020\003\"\203\004\n\tPrimitive\0221\n\nnull_value\030\001 "
  "\001(\0132\033.aapt.pb.Primitive.NullTypeH\000\0223\n\013em"
  "pty_value\030\002 \001(\0132\034.aapt.pb.Primitive.Empt"
  "yTypeH\000\022\025\n\013float_value\030\003 \001(\002H\000\022\031\n\017dimens"
  "ion_value\030\r \001(\rH\000\022\030\n\016fraction_value\030\016 \001("
  "\rH\000\022\033\n\021int_decimal_value\030\006 \001(\005H\000\022\037\n\025int_"
  "hexadecimal_value\030\007 \001(\rH\000\022\027\n\rboolean_val"
  "ue\030\010 \001(\010H\000\022\033\n\021color_argb8_value\030\t \001(\rH\000\022"
  "\032\n\020color_rgb8_value\030\n \001(\rH\000\022\033\n\021color_arg"
  "b4_value\030\013 \001(\rH\000\022\032\n\020color_rgb4_value\030\014 \001"
  "(\rH\000\022(\n\032dimension_value_deprecated\030\004 \001(\002"
  "B\002\030\001H\000\022\'\n\031fraction_value_deprecated\030\005 \001("
  "\002B\002\030\001H\000\032\n\n\010NullType\032\013\n\tEmptyTypeB\r\n\013oneo"
  "f_value\"\220\003\n\tAttribute\022\024\n\014format_flags\030\001 "
  "\001(\r\022\017\n\007min_int\030\002 \001(\005\022\017\n\007max_int\030\003 \001(\005\022)\n"
  "\006symbol\030\004 \003(\0132\031.aapt.pb.Attribute.Symbol"
  "\032y\n\006Symbol\022\037\n\006source\030\001 \001(\0132\017.aapt.pb.Sou"
  "rce\022\017\n\007comment\030\002 \001(\t\022 \n\004name\030\003 \001(\0132\022.aap"
  "t.pb.Reference\022\r\n\005value\030\004 \001(\r\022\014\n\004type\030\005 "
  "\001(\r\"\244\001\n\013FormatFlags\022\010\n\004NONE\020\000\022\t\n\003ANY\020\377\377\003"
  "\022\r\n\tREFERENCE\020\001\022\n\n\006STRING\020\002\022\013\n\007INTEGER\020\004"
  "\022\013\n\007BOOLEAN\020\010\022\t\n\005COLOR\020\020\022\t\n\005FLOAT\020 \022\r\n\tD"
  "IMENSION\020@\022\r\n\010FRACTION\020\200\001\022\n\n\004ENUM\020\200\200\004\022\013\n"
  "\005FLAGS\020\200\200\010\"\361\001\n\005Style\022\"\n\006parent\030\001 \001(\0132\022.a"
  "apt.pb.Reference\022&\n\rparent_source\030\002 \001(\0132"
  "\017.aapt.pb.Source\022#\n\005entry\030\003 \003(\0132\024.aapt.p"
  "b.Style.Entry\032w\n\005Entry\022\037\n\006source\030\001 \001(\0132\017"
  ".aapt.pb.Source\022\017\n\007comment\030\002 \001(\t\022\037\n\003key\030"
  "\003 \001(\0132\022.aapt.pb.Reference\022\033\n\004item\030\004 \001(\0132"
  "\r.aapt.pb.Item\"\221\001\n\tStyleable\022\'\n\005entry\030\001 "
  "\003(\0132\030.aapt.pb.Styleable.Entry\032[\n\005Entry\022\037"
  "\n\006source\030\001 \001(\0132\017.aapt.pb.Source\022\017\n\007comme"
  "nt\030\002 \001(\t\022 \n\004attr\030\003 \001(\0132\022.aapt.pb.Referen"
  "ce\"\212\001\n\005Array\022\'\n\007element\030\001 \003(\0132\026.aapt.pb."
  "Array.Element\032X\n\007Element\022\037\n\006source\030\001 \001(\013"
  "2\017.aapt.pb.Source\022\017\n\007comment\030\002 \001(\t\022\033\n\004it"
  "em\030\003 \001(\0132\r.aapt.pb.Item\"\357\001\n\006Plural\022$\n\005en"
  "try\030\001 \003(\0132\025.aapt.pb.Plural.Entry\032|\n\005Entr"
  "y\022\037\n\006source\030\001 \001(\0132\017.aapt.pb.Source\022\017\n\007co"
  "mment\030\002 \001(\t\022$\n\005arity\030\003 \001(\0162\025.aapt.pb.Plu"
  "ral.Arity\022\033\n\004item\030\004 \001(\0132\r.aapt.pb.Item\"A"
  "\n\005Arity\022\010\n\004ZERO\020\000\022\007\n\003ONE\020\001\022\007\n\003TWO\020\002\022\007\n\003F"
  "EW\020\003\022\010\n\004MANY\020\004\022\t\n\005OTHER\020\005\"r\n\007XmlNode\022&\n\007"
  "element\030\001 \001(\0132\023.aapt.pb.XmlElementH\000\022\016\n\004"
  "text\030\002 \001(\tH\000\022\'\n\006source\030\003 \001(\0132\027.aapt.pb.S"
  "ourcePositionB\006\n\004node\"\262\001\n\nXmlElement\0224\n\025"
  "namespace_declaration\030\001 \003(\0132\025.aapt.pb.Xm"
  "lNamespace\022\025\n\rnamespace_uri\030\002 \001(\t\022\014\n\004nam"
  "e\030\003 \001(\t\022(\n\tattribute\030\004 \003(\0132\025.aapt.pb.Xml"
  "Attribute\022\037\n\005child\030\005 \003(\0132\020.aapt.pb.XmlNo"
  "de\"T\n\014XmlNamespace\022\016\n\006prefix\030\001 \001(\t\022\013\n\003ur"
  "i\030\002 \001(\t\022\'\n\006source\030\003 \001(\0132\027.aapt.pb.Source"
  "Position\"\246\001\n\014XmlAttribute\022\025\n\rnamespace_u"
  "ri\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\'\n"
  "\006source\030\004 \001(\0132\027.aapt.pb.SourcePosition\022\023"
  "\n\013resource_id\030\005 \001(\r\022$\n\rcompiled_item\030\006 \001"
  "(\0132\r.aapt.pb.ItemB\022\n\020com.android.aaptb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Resources_2eproto_deps[1] = {
  &::descriptor_table_Configuration_2eproto,
};
static ::_pbi::once_flag descriptor_table_Resources_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Resources_2eproto = {
    false, false, 5045, descriptor_table_protodef_Resources_2eproto,
    "Resources.proto",
    &descriptor_table_Resources_2eproto_once, descriptor_table_Resources_2eproto_deps, 1, 44,
    schemas, file_default_instances, TableStruct_Resources_2eproto::offsets,
    file_level_metadata_Resources_2eproto, file_level_enum_descriptors_Resources_2eproto,
    file_level_service_descriptors_Resources_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Resources_2eproto_getter() {
  return &descriptor_table_Resources_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Resources_2eproto(&descriptor_table_Resources_2eproto);
namespace aapt {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Resources_2eproto);
  return file_level_enum_descriptors_Resources_2eproto[0];
}
bool Visibility_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Visibility_Level Visibility::UNKNOWN;
constexpr Visibility_Level Visibility::PRIVATE;
constexpr Visibility_Level Visibility::PUBLIC;
constexpr Visibility_Level Visibility::Level_MIN;
constexpr Visibility_Level Visibility::Level_MAX;
constexpr int Visibility::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayableItem_Policy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Resources_2eproto);
  return file_level_enum_descriptors_Resources_2eproto[1];
}
bool OverlayableItem_Policy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OverlayableItem_Policy OverlayableItem::NONE;
constexpr OverlayableItem_Policy OverlayableItem::PUBLIC;
constexpr OverlayableItem_Policy OverlayableItem::SYSTEM;
constexpr OverlayableItem_Policy OverlayableItem::VENDOR;
constexpr OverlayableItem_Policy OverlayableItem::PRODUCT;
constexpr OverlayableItem_Policy OverlayableItem::SIGNATURE;
constexpr OverlayableItem_Policy OverlayableItem::ODM;
constexpr OverlayableItem_Policy OverlayableItem::OEM;
constexpr OverlayableItem_Policy OverlayableItem::ACTOR;
constexpr OverlayableItem_Policy OverlayableItem::CONFIG_SIGNATURE;
constexpr OverlayableItem_Policy OverlayableItem::Policy_MIN;
constexpr OverlayableItem_Policy OverlayableItem::Policy_MAX;
constexpr int OverlayableItem::Policy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reference_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Resources_2eproto);
  return file_level_enum_descriptors_Resources_2eproto[2];
}
bool Reference_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Reference_Type Reference::REFERENCE;
constexpr Reference_Type Reference::ATTRIBUTE;
constexpr Reference_Type Reference::Type_MIN;
constexpr Reference_Type Reference::Type_MAX;
constexpr int Reference::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileReference_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Resources_2eproto);
  return file_level_enum_descriptors_Resources_2eproto[3];
}
bool FileReference_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FileReference_Type FileReference::UNKNOWN;
constexpr FileReference_Type FileReference::PNG;
constexpr FileReference_Type FileReference::BINARY_XML;
constexpr FileReference_Type FileReference::PROTO_XML;
constexpr FileReference_Type FileReference::Type_MIN;
constexpr FileReference_Type FileReference::Type_MAX;
constexpr int FileReference::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Attribute_FormatFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Resources_2eproto);
  return file_level_enum_descriptors_Resources_2eproto[4];
}
bool Attribute_FormatFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 65535:
    case 65536:
    case 131072:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Attribute_FormatFlags Attribute::NONE;
constexpr Attribute_FormatFlags Attribute::ANY;
constexpr Attribute_FormatFlags Attribute::REFERENCE;
constexpr Attribute_FormatFlags Attribute::STRING;
constexpr Attribute_FormatFlags Attribute::INTEGER;
constexpr Attribute_FormatFlags Attribute::BOOLEAN;
constexpr Attribute_FormatFlags Attribute::COLOR;
constexpr Attribute_FormatFlags Attribute::FLOAT;
constexpr Attribute_FormatFlags Attribute::DIMENSION;
constexpr Attribute_FormatFlags Attribute::FRACTION;
constexpr Attribute_FormatFlags Attribute::ENUM;
constexpr Attribute_FormatFlags Attribute::FLAGS;
constexpr Attribute_FormatFlags Attribute::FormatFlags_MIN;
constexpr Attribute_FormatFlags Attribute::FormatFlags_MAX;
constexpr int Attribute::FormatFlags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Plural_Arity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Resources_2eproto);
  return file_level_enum_descriptors_Resources_2eproto[5];
}
bool Plural_Arity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Plural_Arity Plural::ZERO;
constexpr Plural_Arity Plural::ONE;
constexpr Plural_Arity Plural::TWO;
constexpr Plural_Arity Plural::FEW;
constexpr Plural_Arity Plural::MANY;
constexpr Plural_Arity Plural::OTHER;
constexpr Plural_Arity Plural::Arity_MIN;
constexpr Plural_Arity Plural::Arity_MAX;
constexpr int Plural::Arity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StringPool::_Internal {
 public:
};

StringPool::StringPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.StringPool)
}
StringPool::StringPool(const StringPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringPool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StringPool)
}

inline void StringPool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringPool::~StringPool() {
  // @@protoc_insertion_point(destructor:aapt.pb.StringPool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringPool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void StringPool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringPool::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StringPool)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringPool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StringPool::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StringPool)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StringPool)
  return target;
}

size_t StringPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StringPool)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringPool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringPool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringPool::GetClassData() const { return &_class_data_; }


void StringPool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringPool*>(&to_msg);
  auto& from = static_cast<const StringPool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StringPool)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringPool::CopyFrom(const StringPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StringPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringPool::IsInitialized() const {
  return true;
}

void StringPool::InternalSwap(StringPool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringPool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[0]);
}

// ===================================================================

class SourcePosition::_Internal {
 public:
};

SourcePosition::SourcePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.SourcePosition)
}
SourcePosition::SourcePosition(const SourcePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourcePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_number_){}
    , decltype(_impl_.column_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_number_, &from._impl_.line_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_number_) -
    reinterpret_cast<char*>(&_impl_.line_number_)) + sizeof(_impl_.column_number_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.SourcePosition)
}

inline void SourcePosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_number_){0u}
    , decltype(_impl_.column_number_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SourcePosition::~SourcePosition() {
  // @@protoc_insertion_point(destructor:aapt.pb.SourcePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourcePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SourcePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourcePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.SourcePosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.column_number_) -
      reinterpret_cast<char*>(&_impl_.line_number_)) + sizeof(_impl_.column_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourcePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 line_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.line_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 column_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.column_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SourcePosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.SourcePosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_number = 1;
  if (this->_internal_line_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_line_number(), target);
  }

  // uint32 column_number = 2;
  if (this->_internal_column_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.SourcePosition)
  return target;
}

size_t SourcePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.SourcePosition)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 line_number = 1;
  if (this->_internal_line_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line_number());
  }

  // uint32 column_number = 2;
  if (this->_internal_column_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourcePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourcePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourcePosition::GetClassData() const { return &_class_data_; }


void SourcePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourcePosition*>(&to_msg);
  auto& from = static_cast<const SourcePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.SourcePosition)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line_number() != 0) {
    _this->_internal_set_line_number(from._internal_line_number());
  }
  if (from._internal_column_number() != 0) {
    _this->_internal_set_column_number(from._internal_column_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourcePosition::CopyFrom(const SourcePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.SourcePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourcePosition::IsInitialized() const {
  return true;
}

void SourcePosition::InternalSwap(SourcePosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.column_number_)
      + sizeof(SourcePosition::_impl_.column_number_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.line_number_)>(
          reinterpret_cast<char*>(&_impl_.line_number_),
          reinterpret_cast<char*>(&other->_impl_.line_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourcePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[1]);
}

// ===================================================================

class Source::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& position(const Source* msg);
};

const ::aapt::pb::SourcePosition&
Source::_Internal::position(const Source* msg) {
  return *msg->_impl_.position_;
}
Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Source* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.path_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::aapt::pb::SourcePosition(*from._impl_.position_);
  }
  _this->_impl_.path_idx_ = from._impl_.path_idx_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Source)
}

inline void Source::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.path_idx_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:aapt.pb.Source)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Source::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Source)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _impl_.path_idx_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Source::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 path_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.path_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.SourcePosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Source::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Source)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 path_idx = 1;
  if (this->_internal_path_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_path_idx(), target);
  }

  // .aapt.pb.SourcePosition position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Source)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.SourcePosition position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // uint32 path_idx = 1;
  if (this->_internal_path_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_path_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Source::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Source::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Source::GetClassData() const { return &_class_data_; }


void Source::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Source*>(&to_msg);
  auto& from = static_cast<const Source&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Source)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::aapt::pb::SourcePosition::MergeFrom(
        from._internal_position());
  }
  if (from._internal_path_idx() != 0) {
    _this->_internal_set_path_idx(from._internal_path_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, _impl_.path_idx_)
      + sizeof(Source::_impl_.path_idx_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Source, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[2]);
}

// ===================================================================

class ToolFingerprint::_Internal {
 public:
};

ToolFingerprint::ToolFingerprint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.ToolFingerprint)
}
ToolFingerprint::ToolFingerprint(const ToolFingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolFingerprint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool().empty()) {
    _this->_impl_.tool_.Set(from._internal_tool(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.ToolFingerprint)
}

inline void ToolFingerprint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToolFingerprint::~ToolFingerprint() {
  // @@protoc_insertion_point(destructor:aapt.pb.ToolFingerprint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolFingerprint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_.Destroy();
  _impl_.version_.Destroy();
}

void ToolFingerprint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolFingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.ToolFingerprint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolFingerprint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.ToolFingerprint.tool"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.ToolFingerprint.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ToolFingerprint::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.ToolFingerprint)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool = 1;
  if (!this->_internal_tool().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool().data(), static_cast<int>(this->_internal_tool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.ToolFingerprint.tool");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.ToolFingerprint.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.ToolFingerprint)
  return target;
}

size_t ToolFingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.ToolFingerprint)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool = 1;
  if (!this->_internal_tool().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolFingerprint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolFingerprint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolFingerprint::GetClassData() const { return &_class_data_; }


void ToolFingerprint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolFingerprint*>(&to_msg);
  auto& from = static_cast<const ToolFingerprint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.ToolFingerprint)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tool().empty()) {
    _this->_internal_set_tool(from._internal_tool());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolFingerprint::CopyFrom(const ToolFingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.ToolFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolFingerprint::IsInitialized() const {
  return true;
}

void ToolFingerprint::InternalSwap(ToolFingerprint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_, lhs_arena,
      &other->_impl_.tool_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolFingerprint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[3]);
}

// ===================================================================

class ResourceTable::_Internal {
 public:
  static const ::aapt::pb::StringPool& source_pool(const ResourceTable* msg);
};

const ::aapt::pb::StringPool&
ResourceTable::_Internal::source_pool(const ResourceTable* msg) {
  return *msg->_impl_.source_pool_;
}
ResourceTable::ResourceTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.ResourceTable)
}
ResourceTable::ResourceTable(const ResourceTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.package_){from._impl_.package_}
    , decltype(_impl_.overlayable_){from._impl_.overlayable_}
    , decltype(_impl_.tool_fingerprint_){from._impl_.tool_fingerprint_}
    , decltype(_impl_.source_pool_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_pool()) {
    _this->_impl_.source_pool_ = new ::aapt::pb::StringPool(*from._impl_.source_pool_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.ResourceTable)
}

inline void ResourceTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.package_){arena}
    , decltype(_impl_.overlayable_){arena}
    , decltype(_impl_.tool_fingerprint_){arena}
    , decltype(_impl_.source_pool_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourceTable::~ResourceTable() {
  // @@protoc_insertion_point(destructor:aapt.pb.ResourceTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_.~RepeatedPtrField();
  _impl_.overlayable_.~RepeatedPtrField();
  _impl_.tool_fingerprint_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.source_pool_;
}

void ResourceTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceTable::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.ResourceTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.package_.Clear();
  _impl_.overlayable_.Clear();
  _impl_.tool_fingerprint_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.source_pool_ != nullptr) {
    delete _impl_.source_pool_;
  }
  _impl_.source_pool_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.StringPool source_pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_pool(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.Package package = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_package(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.Overlayable overlayable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlayable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResourceTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.ResourceTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.StringPool source_pool = 1;
  if (this->_internal_has_source_pool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_pool(this),
        _Internal::source_pool(this).GetCachedSize(), target, stream);
  }

  // repeated .aapt.pb.Package package = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_package_size()); i < n; i++) {
    const auto& repfield = this->_internal_package(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aapt.pb.Overlayable overlayable = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overlayable_size()); i < n; i++) {
    const auto& repfield = this->_internal_overlayable(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tool_fingerprint_size()); i < n; i++) {
    const auto& repfield = this->_internal_tool_fingerprint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.ResourceTable)
  return target;
}

size_t ResourceTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.ResourceTable)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Package package = 2;
  total_size += 1UL * this->_internal_package_size();
  for (const auto& msg : this->_impl_.package_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aapt.pb.Overlayable overlayable = 3;
  total_size += 1UL * this->_internal_overlayable_size();
  for (const auto& msg : this->_impl_.overlayable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
  total_size += 1UL * this->_internal_tool_fingerprint_size();
  for (const auto& msg : this->_impl_.tool_fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aapt.pb.StringPool source_pool = 1;
  if (this->_internal_has_source_pool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_pool_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceTable::GetClassData() const { return &_class_data_; }


void ResourceTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceTable*>(&to_msg);
  auto& from = static_cast<const ResourceTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.ResourceTable)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.package_.MergeFrom(from._impl_.package_);
  _this->_impl_.overlayable_.MergeFrom(from._impl_.overlayable_);
  _this->_impl_.tool_fingerprint_.MergeFrom(from._impl_.tool_fingerprint_);
  if (from._internal_has_source_pool()) {
    _this->_internal_mutable_source_pool()->::aapt::pb::StringPool::MergeFrom(
        from._internal_source_pool());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceTable::CopyFrom(const ResourceTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.ResourceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTable::IsInitialized() const {
  return true;
}

void ResourceTable::InternalSwap(ResourceTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.package_.InternalSwap(&other->_impl_.package_);
  _impl_.overlayable_.InternalSwap(&other->_impl_.overlayable_);
  _impl_.tool_fingerprint_.InternalSwap(&other->_impl_.tool_fingerprint_);
  swap(_impl_.source_pool_, other->_impl_.source_pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[4]);
}

// ===================================================================

class PackageId::_Internal {
 public:
};

PackageId::PackageId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.PackageId)
}
PackageId::PackageId(const PackageId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PackageId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.PackageId)
}

inline void PackageId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PackageId::~PackageId() {
  // @@protoc_insertion_point(destructor:aapt.pb.PackageId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackageId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PackageId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackageId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.PackageId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PackageId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.PackageId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.PackageId)
  return target;
}

size_t PackageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.PackageId)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackageId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PackageId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackageId::GetClassData() const { return &_class_data_; }


void PackageId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PackageId*>(&to_msg);
  auto& from = static_cast<const PackageId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.PackageId)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackageId::CopyFrom(const PackageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.PackageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageId::IsInitialized() const {
  return true;
}

void PackageId::InternalSwap(PackageId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[5]);
}

// ===================================================================

class Package::_Internal {
 public:
  static const ::aapt::pb::PackageId& package_id(const Package* msg);
};

const ::aapt::pb::PackageId&
Package::_Internal::package_id(const Package* msg) {
  return *msg->_impl_.package_id_;
}
Package::Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){from._impl_.type_}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.package_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_package_name().empty()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_package_id()) {
    _this->_impl_.package_id_ = new ::aapt::pb::PackageId(*from._impl_.package_id_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Package)
}

inline void Package::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){arena}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.package_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:aapt.pb.Package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Package::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.~RepeatedPtrField();
  _impl_.package_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.package_id_;
}

void Package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.Clear();
  _impl_.package_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.package_id_ != nullptr) {
    delete _impl_.package_id_;
  }
  _impl_.package_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.PackageId package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Package.package_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.PackageId package_id = 1;
  if (this->_internal_has_package_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::package_id(this),
        _Internal::package_id(this).GetCachedSize(), target, stream);
  }

  // string package_name = 2;
  if (!this->_internal_package_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_name().data(), static_cast<int>(this->_internal_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Package.package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package_name(), target);
  }

  // repeated .aapt.pb.Type type = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_size()); i < n; i++) {
    const auto& repfield = this->_internal_type(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Package)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Type type = 3;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->_impl_.type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string package_name = 2;
  if (!this->_internal_package_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_name());
  }

  // .aapt.pb.PackageId package_id = 1;
  if (this->_internal_has_package_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.package_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Package::GetClassData() const { return &_class_data_; }


void Package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Package*>(&to_msg);
  auto& from = static_cast<const Package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Package)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_.MergeFrom(from._impl_.type_);
  if (!from._internal_package_name().empty()) {
    _this->_internal_set_package_name(from._internal_package_name());
  }
  if (from._internal_has_package_id()) {
    _this->_internal_mutable_package_id()->::aapt::pb::PackageId::MergeFrom(
        from._internal_package_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_.InternalSwap(&other->_impl_.type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  swap(_impl_.package_id_, other->_impl_.package_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[6]);
}

// ===================================================================

class TypeId::_Internal {
 public:
};

TypeId::TypeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.TypeId)
}
TypeId::TypeId(const TypeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.TypeId)
}

inline void TypeId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TypeId::~TypeId() {
  // @@protoc_insertion_point(destructor:aapt.pb.TypeId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TypeId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.TypeId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TypeId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.TypeId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.TypeId)
  return target;
}

size_t TypeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.TypeId)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeId::GetClassData() const { return &_class_data_; }


void TypeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeId*>(&to_msg);
  auto& from = static_cast<const TypeId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.TypeId)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeId::CopyFrom(const TypeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.TypeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeId::IsInitialized() const {
  return true;
}

void TypeId::InternalSwap(TypeId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[7]);
}

// ===================================================================

class Type::_Internal {
 public:
  static const ::aapt::pb::TypeId& type_id(const Type* msg);
};

const ::aapt::pb::TypeId&
Type::_Internal::type_id(const Type* msg) {
  return *msg->_impl_.type_id_;
}
Type::Type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type_id()) {
    _this->_impl_.type_id_ = new ::aapt::pb::TypeId(*from._impl_.type_id_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Type)
}

inline void Type::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:aapt.pb.Type)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_id_;
}

void Type::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Type)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.type_id_ != nullptr) {
    delete _impl_.type_id_;
  }
  _impl_.type_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.TypeId type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Type.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.Entry entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Type)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.TypeId type_id = 1;
  if (this->_internal_has_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type_id(this),
        _Internal::type_id(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Type.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .aapt.pb.Entry entry = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Type)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Entry entry = 3;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .aapt.pb.TypeId type_id = 1;
  if (this->_internal_has_type_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type::GetClassData() const { return &_class_data_; }


void Type::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type*>(&to_msg);
  auto& from = static_cast<const Type&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Type)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_type_id()) {
    _this->_internal_mutable_type_id()->::aapt::pb::TypeId::MergeFrom(
        from._internal_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_id_, other->_impl_.type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[8]);
}

// ===================================================================

class Visibility::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Visibility* msg);
};

const ::aapt::pb::Source&
Visibility::_Internal::source(const Visibility* msg) {
  return *msg->_impl_.source_;
}
Visibility::Visibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Visibility)
}
Visibility::Visibility(const Visibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Visibility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Visibility)
}

inline void Visibility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Visibility::~Visibility() {
  // @@protoc_insertion_point(destructor:aapt.pb.Visibility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Visibility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void Visibility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Visibility::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Visibility)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Visibility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Visibility.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::aapt::pb::Visibility_Level>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Source source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Visibility.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Visibility::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Visibility)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Visibility.Level level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // .aapt.pb.Source source = 2;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 3;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Visibility.comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Visibility)
  return target;
}

size_t Visibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Visibility)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 3;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 2;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Visibility.Level level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Visibility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Visibility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Visibility::GetClassData() const { return &_class_data_; }


void Visibility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Visibility*>(&to_msg);
  auto& from = static_cast<const Visibility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Visibility)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Visibility::CopyFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visibility::IsInitialized() const {
  return true;
}

void Visibility::InternalSwap(Visibility* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Visibility, _impl_.level_)
      + sizeof(Visibility::_impl_.level_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Visibility, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Visibility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[9]);
}

// ===================================================================

class AllowNew::_Internal {
 public:
  static const ::aapt::pb::Source& source(const AllowNew* msg);
};

const ::aapt::pb::Source&
AllowNew::_Internal::source(const AllowNew* msg) {
  return *msg->_impl_.source_;
}
AllowNew::AllowNew(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.AllowNew)
}
AllowNew::AllowNew(const AllowNew& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllowNew* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.AllowNew)
}

inline void AllowNew::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllowNew::~AllowNew() {
  // @@protoc_insertion_point(destructor:aapt.pb.AllowNew)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowNew::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void AllowNew::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowNew::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.AllowNew)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowNew::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.AllowNew.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllowNew::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.AllowNew)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.AllowNew.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.AllowNew)
  return target;
}

size_t AllowNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.AllowNew)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowNew::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllowNew::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowNew::GetClassData() const { return &_class_data_; }


void AllowNew::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllowNew*>(&to_msg);
  auto& from = static_cast<const AllowNew&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.AllowNew)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowNew::CopyFrom(const AllowNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.AllowNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowNew::IsInitialized() const {
  return true;
}

void AllowNew::InternalSwap(AllowNew* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowNew::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[10]);
}

// ===================================================================

class Overlayable::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Overlayable* msg);
};

const ::aapt::pb::Source&
Overlayable::_Internal::source(const Overlayable* msg) {
  return *msg->_impl_.source_;
}
Overlayable::Overlayable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Overlayable)
}
Overlayable::Overlayable(const Overlayable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Overlayable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.actor_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.actor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actor().empty()) {
    _this->_impl_.actor_.Set(from._internal_actor(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Overlayable)
}

inline void Overlayable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.actor_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Overlayable::~Overlayable() {
  // @@protoc_insertion_point(destructor:aapt.pb.Overlayable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Overlayable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.actor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void Overlayable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Overlayable::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Overlayable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.actor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Overlayable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Overlayable.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Source source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string actor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_actor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Overlayable.actor"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Overlayable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Overlayable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Overlayable.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .aapt.pb.Source source = 2;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string actor = 3;
  if (!this->_internal_actor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor().data(), static_cast<int>(this->_internal_actor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Overlayable.actor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_actor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Overlayable)
  return target;
}

size_t Overlayable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Overlayable)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string actor = 3;
  if (!this->_internal_actor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor());
  }

  // .aapt.pb.Source source = 2;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Overlayable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Overlayable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Overlayable::GetClassData() const { return &_class_data_; }


void Overlayable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Overlayable*>(&to_msg);
  auto& from = static_cast<const Overlayable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Overlayable)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_actor().empty()) {
    _this->_internal_set_actor(from._internal_actor());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Overlayable::CopyFrom(const Overlayable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Overlayable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Overlayable::IsInitialized() const {
  return true;
}

void Overlayable::InternalSwap(Overlayable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.actor_, lhs_arena,
      &other->_impl_.actor_, rhs_arena
  );
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Overlayable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[11]);
}

// ===================================================================

class OverlayableItem::_Internal {
 public:
  static const ::aapt::pb::Source& source(const OverlayableItem* msg);
};

const ::aapt::pb::Source&
OverlayableItem::_Internal::source(const OverlayableItem* msg) {
  return *msg->_impl_.source_;
}
OverlayableItem::OverlayableItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.OverlayableItem)
}
OverlayableItem::OverlayableItem(const OverlayableItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverlayableItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_){from._impl_.policy_}
    , /*decltype(_impl_._policy_cached_byte_size_)*/{0}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.overlayable_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  _this->_impl_.overlayable_idx_ = from._impl_.overlayable_idx_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.OverlayableItem)
}

inline void OverlayableItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_){arena}
    , /*decltype(_impl_._policy_cached_byte_size_)*/{0}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.overlayable_idx_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverlayableItem::~OverlayableItem() {
  // @@protoc_insertion_point(destructor:aapt.pb.OverlayableItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverlayableItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.policy_.~RepeatedField();
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void OverlayableItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverlayableItem::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.OverlayableItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.policy_.Clear();
  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _impl_.overlayable_idx_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayableItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.OverlayableItem.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_policy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_policy(static_cast<::aapt::pb::OverlayableItem_Policy>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 overlayable_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.overlayable_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OverlayableItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.OverlayableItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.OverlayableItem.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
  {
    int byte_size = _impl_._policy_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.policy_, byte_size, target);
    }
  }

  // uint32 overlayable_idx = 4;
  if (this->_internal_overlayable_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_overlayable_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.OverlayableItem)
  return target;
}

size_t OverlayableItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.OverlayableItem)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_policy_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_policy(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<::int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._policy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // uint32 overlayable_idx = 4;
  if (this->_internal_overlayable_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_overlayable_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayableItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverlayableItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayableItem::GetClassData() const { return &_class_data_; }


void OverlayableItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverlayableItem*>(&to_msg);
  auto& from = static_cast<const OverlayableItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.OverlayableItem)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.policy_.MergeFrom(from._impl_.policy_);
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_overlayable_idx() != 0) {
    _this->_internal_set_overlayable_idx(from._internal_overlayable_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayableItem::CopyFrom(const OverlayableItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.OverlayableItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayableItem::IsInitialized() const {
  return true;
}

void OverlayableItem::InternalSwap(OverlayableItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.policy_.InternalSwap(&other->_impl_.policy_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OverlayableItem, _impl_.overlayable_idx_)
      + sizeof(OverlayableItem::_impl_.overlayable_idx_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(OverlayableItem, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayableItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[12]);
}

// ===================================================================

class EntryId::_Internal {
 public:
};

EntryId::EntryId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.EntryId)
}
EntryId::EntryId(const EntryId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntryId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.EntryId)
}

inline void EntryId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntryId::~EntryId() {
  // @@protoc_insertion_point(destructor:aapt.pb.EntryId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntryId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EntryId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntryId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.EntryId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntryId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EntryId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.EntryId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.EntryId)
  return target;
}

size_t EntryId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.EntryId)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntryId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntryId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntryId::GetClassData() const { return &_class_data_; }


void EntryId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntryId*>(&to_msg);
  auto& from = static_cast<const EntryId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.EntryId)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntryId::CopyFrom(const EntryId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.EntryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryId::IsInitialized() const {
  return true;
}

void EntryId::InternalSwap(EntryId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[13]);
}

// ===================================================================

class Entry::_Internal {
 public:
  static const ::aapt::pb::EntryId& entry_id(const Entry* msg);
  static const ::aapt::pb::Visibility& visibility(const Entry* msg);
  static const ::aapt::pb::AllowNew& allow_new(const Entry* msg);
  static const ::aapt::pb::OverlayableItem& overlayable_item(const Entry* msg);
};

const ::aapt::pb::EntryId&
Entry::_Internal::entry_id(const Entry* msg) {
  return *msg->_impl_.entry_id_;
}
const ::aapt::pb::Visibility&
Entry::_Internal::visibility(const Entry* msg) {
  return *msg->_impl_.visibility_;
}
const ::aapt::pb::AllowNew&
Entry::_Internal::allow_new(const Entry* msg) {
  return *msg->_impl_.allow_new_;
}
const ::aapt::pb::OverlayableItem&
Entry::_Internal::overlayable_item(const Entry* msg) {
  return *msg->_impl_.overlayable_item_;
}
Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.config_value_){from._impl_.config_value_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.entry_id_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.allow_new_){nullptr}
    , decltype(_impl_.overlayable_item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_entry_id()) {
    _this->_impl_.entry_id_ = new ::aapt::pb::EntryId(*from._impl_.entry_id_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::aapt::pb::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_allow_new()) {
    _this->_impl_.allow_new_ = new ::aapt::pb::AllowNew(*from._impl_.allow_new_);
  }
  if (from._internal_has_overlayable_item()) {
    _this->_impl_.overlayable_item_ = new ::aapt::pb::OverlayableItem(*from._impl_.overlayable_item_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Entry)
}

inline void Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_value_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.entry_id_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.allow_new_){nullptr}
    , decltype(_impl_.overlayable_item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_value_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.entry_id_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.allow_new_;
  if (this != internal_default_instance()) delete _impl_.overlayable_item_;
}

void Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Entry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.config_value_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.entry_id_ != nullptr) {
    delete _impl_.entry_id_;
  }
  _impl_.entry_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allow_new_ != nullptr) {
    delete _impl_.allow_new_;
  }
  _impl_.allow_new_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.overlayable_item_ != nullptr) {
    delete _impl_.overlayable_item_;
  }
  _impl_.overlayable_item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.EntryId entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Entry.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Visibility visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.AllowNew allow_new = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_new(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.OverlayableItem overlayable_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlayable_item(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.ConfigValue config_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Entry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Entry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.EntryId entry_id = 1;
  if (this->_internal_has_entry_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entry_id(this),
        _Internal::entry_id(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Entry.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .aapt.pb.Visibility visibility = 3;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.AllowNew allow_new = 4;
  if (this->_internal_has_allow_new()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::allow_new(this),
        _Internal::allow_new(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.OverlayableItem overlayable_item = 5;
  if (this->_internal_has_overlayable_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::overlayable_item(this),
        _Internal::overlayable_item(this).GetCachedSize(), target, stream);
  }

  // repeated .aapt.pb.ConfigValue config_value = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_config_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_config_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Entry)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.ConfigValue config_value = 6;
  total_size += 1UL * this->_internal_config_value_size();
  for (const auto& msg : this->_impl_.config_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .aapt.pb.EntryId entry_id = 1;
  if (this->_internal_has_entry_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entry_id_);
  }

  // .aapt.pb.Visibility visibility = 3;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .aapt.pb.AllowNew allow_new = 4;
  if (this->_internal_has_allow_new()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allow_new_);
  }

  // .aapt.pb.OverlayableItem overlayable_item = 5;
  if (this->_internal_has_overlayable_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.overlayable_item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entry::GetClassData() const { return &_class_data_; }


void Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entry*>(&to_msg);
  auto& from = static_cast<const Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.config_value_.MergeFrom(from._impl_.config_value_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_entry_id()) {
    _this->_internal_mutable_entry_id()->::aapt::pb::EntryId::MergeFrom(
        from._internal_entry_id());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::aapt::pb::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_allow_new()) {
    _this->_internal_mutable_allow_new()->::aapt::pb::AllowNew::MergeFrom(
        from._internal_allow_new());
  }
  if (from._internal_has_overlayable_item()) {
    _this->_internal_mutable_overlayable_item()->::aapt::pb::OverlayableItem::MergeFrom(
        from._internal_overlayable_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.config_value_.InternalSwap(&other->_impl_.config_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entry, _impl_.overlayable_item_)
      + sizeof(Entry::_impl_.overlayable_item_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Entry, _impl_.entry_id_)>(
          reinterpret_cast<char*>(&_impl_.entry_id_),
          reinterpret_cast<char*>(&other->_impl_.entry_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[14]);
}

// ===================================================================

class ConfigValue::_Internal {
 public:
  static const ::aapt::pb::Configuration& config(const ConfigValue* msg);
  static const ::aapt::pb::Value& value(const ConfigValue* msg);
};

const ::aapt::pb::Configuration&
ConfigValue::_Internal::config(const ConfigValue* msg) {
  return *msg->_impl_.config_;
}
const ::aapt::pb::Value&
ConfigValue::_Internal::value(const ConfigValue* msg) {
  return *msg->_impl_.value_;
}
void ConfigValue::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
ConfigValue::ConfigValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.ConfigValue)
}
ConfigValue::ConfigValue(const ConfigValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::aapt::pb::Configuration(*from._impl_.config_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::aapt::pb::Value(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.ConfigValue)
}

inline void ConfigValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfigValue::~ConfigValue() {
  // @@protoc_insertion_point(destructor:aapt.pb.ConfigValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.config_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void ConfigValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigValue::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.ConfigValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Configuration config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Value value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfigValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.ConfigValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Configuration config = 1;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Value value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.ConfigValue)
  return target;
}

size_t ConfigValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.ConfigValue)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.Configuration config = 1;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // .aapt.pb.Value value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigValue::GetClassData() const { return &_class_data_; }


void ConfigValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigValue*>(&to_msg);
  auto& from = static_cast<const ConfigValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.ConfigValue)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::aapt::pb::Configuration::MergeFrom(
        from._internal_config());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::aapt::pb::Value::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigValue::CopyFrom(const ConfigValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.ConfigValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigValue::IsInitialized() const {
  return true;
}

void ConfigValue::InternalSwap(ConfigValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigValue, _impl_.value_)
      + sizeof(ConfigValue::_impl_.value_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(ConfigValue, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[15]);
}

// ===================================================================

class Value::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Value* msg);
  static const ::aapt::pb::Item& item(const Value* msg);
  static const ::aapt::pb::CompoundValue& compound_value(const Value* msg);
};

const ::aapt::pb::Source&
Value::_Internal::source(const Value* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Item&
Value::_Internal::item(const Value* msg) {
  return *msg->_impl_.value_.item_;
}
const ::aapt::pb::CompoundValue&
Value::_Internal::compound_value(const Value* msg) {
  return *msg->_impl_.value_.compound_value_;
}
void Value::set_allocated_item(::aapt::pb::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    _impl_.value_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Value.item)
}
void Value::set_allocated_compound_value(::aapt::pb::CompoundValue* compound_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (compound_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compound_value);
    if (message_arena != submessage_arena) {
      compound_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compound_value, submessage_arena);
    }
    set_has_compound_value();
    _impl_.value_.compound_value_ = compound_value;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Value.compound_value)
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.weak_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  _this->_impl_.weak_ = from._impl_.weak_;
  clear_has_value();
  switch (from.value_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::aapt::pb::Item::MergeFrom(
          from._internal_item());
      break;
    }
    case kCompoundValue: {
      _this->_internal_mutable_compound_value()->::aapt::pb::CompoundValue::MergeFrom(
          from._internal_compound_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.weak_){false}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:aapt.pb.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.Value)
  switch (value_case()) {
    case kItem: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.item_;
      }
      break;
    }
    case kCompoundValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.compound_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Value)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _impl_.weak_ = false;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Value.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.CompoundValue compound_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_compound_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Value::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Value)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Value.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // bool weak = 3;
  if (this->_internal_weak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_weak(), target);
  }

  // .aapt.pb.Item item = 4;
  if (_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.CompoundValue compound_value = 5;
  if (_internal_has_compound_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::compound_value(this),
        _Internal::compound_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Value)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // bool weak = 3;
  if (this->_internal_weak() != 0) {
    total_size += 1 + 1;
  }

  switch (value_case()) {
    // .aapt.pb.Item item = 4;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.item_);
      break;
    }
    // .aapt.pb.CompoundValue compound_value = 5;
    case kCompoundValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.compound_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }


void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_weak() != 0) {
    _this->_internal_set_weak(from._internal_weak());
  }
  switch (from.value_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::aapt::pb::Item::MergeFrom(
          from._internal_item());
      break;
    }
    case kCompoundValue: {
      _this->_internal_mutable_compound_value()->::aapt::pb::CompoundValue::MergeFrom(
          from._internal_compound_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Value, _impl_.weak_)
      + sizeof(Value::_impl_.weak_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Value, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[16]);
}

// ===================================================================

class Item::_Internal {
 public:
  static const ::aapt::pb::Reference& ref(const Item* msg);
  static const ::aapt::pb::String& str(const Item* msg);
  static const ::aapt::pb::RawString& raw_str(const Item* msg);
  static const ::aapt::pb::StyledString& styled_str(const Item* msg);
  static const ::aapt::pb::FileReference& file(const Item* msg);
  static const ::aapt::pb::Id& id(const Item* msg);
  static const ::aapt::pb::Primitive& prim(const Item* msg);
};

const ::aapt::pb::Reference&
Item::_Internal::ref(const Item* msg) {
  return *msg->_impl_.value_.ref_;
}
const ::aapt::pb::String&
Item::_Internal::str(const Item* msg) {
  return *msg->_impl_.value_.str_;
}
const ::aapt::pb::RawString&
Item::_Internal::raw_str(const Item* msg) {
  return *msg->_impl_.value_.raw_str_;
}
const ::aapt::pb::StyledString&
Item::_Internal::styled_str(const Item* msg) {
  return *msg->_impl_.value_.styled_str_;
}
const ::aapt::pb::FileReference&
Item::_Internal::file(const Item* msg) {
  return *msg->_impl_.value_.file_;
}
const ::aapt::pb::Id&
Item::_Internal::id(const Item* msg) {
  return *msg->_impl_.value_.id_;
}
const ::aapt::pb::Primitive&
Item::_Internal::prim(const Item* msg) {
  return *msg->_impl_.value_.prim_;
}
void Item::set_allocated_ref(::aapt::pb::Reference* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    set_has_ref();
    _impl_.value_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.ref)
}
void Item::set_allocated_str(::aapt::pb::String* str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(str);
    if (message_arena != submessage_arena) {
      str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str, submessage_arena);
    }
    set_has_str();
    _impl_.value_.str_ = str;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.str)
}
void Item::set_allocated_raw_str(::aapt::pb::RawString* raw_str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (raw_str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_str);
    if (message_arena != submessage_arena) {
      raw_str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_str, submessage_arena);
    }
    set_has_raw_str();
    _impl_.value_.raw_str_ = raw_str;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.raw_str)
}
void Item::set_allocated_styled_str(::aapt::pb::StyledString* styled_str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (styled_str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(styled_str);
    if (message_arena != submessage_arena) {
      styled_str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styled_str, submessage_arena);
    }
    set_has_styled_str();
    _impl_.value_.styled_str_ = styled_str;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.styled_str)
}
void Item::set_allocated_file(::aapt::pb::FileReference* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.value_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.file)
}
void Item::set_allocated_id(::aapt::pb::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
    _impl_.value_.id_ = id;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.id)
}
void Item::set_allocated_prim(::aapt::pb::Primitive* prim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (prim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prim);
    if (message_arena != submessage_arena) {
      prim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prim, submessage_arena);
    }
    set_has_prim();
    _impl_.value_.prim_ = prim;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.prim)
}
Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kRef: {
      _this->_internal_mutable_ref()->::aapt::pb::Reference::MergeFrom(
          from._internal_ref());
      break;
    }
    case kStr: {
      _this->_internal_mutable_str()->::aapt::pb::String::MergeFrom(
          from._internal_str());
      break;
    }
    case kRawStr: {
      _this->_internal_mutable_raw_str()->::aapt::pb::RawString::MergeFrom(
          from._internal_raw_str());
      break;
    }
    case kStyledStr: {
      _this->_internal_mutable_styled_str()->::aapt::pb::StyledString::MergeFrom(
          from._internal_styled_str());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::aapt::pb::FileReference::MergeFrom(
          from._internal_file());
      break;
    }
    case kId: {
      _this->_internal_mutable_id()->::aapt::pb::Id::MergeFrom(
          from._internal_id());
      break;
    }
    case kPrim: {
      _this->_internal_mutable_prim()->::aapt::pb::Primitive::MergeFrom(
          from._internal_prim());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:aapt.pb.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.Item)
  switch (value_case()) {
    case kRef: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ref_;
      }
      break;
    }
    case kStr: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.str_;
      }
      break;
    }
    case kRawStr: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.raw_str_;
      }
      break;
    }
    case kStyledStr: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.styled_str_;
      }
      break;
    }
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.file_;
      }
      break;
    }
    case kId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.id_;
      }
      break;
    }
    case kPrim: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.prim_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Item)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Reference ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.String str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_str(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.RawString raw_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_str(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.StyledString styled_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_styled_str(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.FileReference file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Id id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Primitive prim = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prim(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Item::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Item)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference ref = 1;
  if (_internal_has_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.String str = 2;
  if (_internal_has_str()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::str(this),
        _Internal::str(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.RawString raw_str = 3;
  if (_internal_has_raw_str()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::raw_str(this),
        _Internal::raw_str(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.StyledString styled_str = 4;
  if (_internal_has_styled_str()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::styled_str(this),
        _Internal::styled_str(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.FileReference file = 5;
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Id id = 6;
  if (_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Primitive prim = 7;
  if (_internal_has_prim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::prim(this),
        _Internal::prim(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Item)
  size_t total_size = 0;

  switch (value_case()) {
    // .aapt.pb.Reference ref = 1;
    case kRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ref_);
      break;
    }
    // .aapt.pb.String str = 2;
    case kStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.str_);
      break;
    }
    // .aapt.pb.RawString raw_str = 3;
    case kRawStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.raw_str_);
      break;
    }
    // .aapt.pb.StyledString styled_str = 4;
    case kStyledStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.styled_str_);
      break;
    }
    // .aapt.pb.FileReference file = 5;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.file_);
      break;
    }
    // .aapt.pb.Id id = 6;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.id_);
      break;
    }
    // .aapt.pb.Primitive prim = 7;
    case kPrim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.prim_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kRef: {
      _this->_internal_mutable_ref()->::aapt::pb::Reference::MergeFrom(
          from._internal_ref());
      break;
    }
    case kStr: {
      _this->_internal_mutable_str()->::aapt::pb::String::MergeFrom(
          from._internal_str());
      break;
    }
    case kRawStr: {
      _this->_internal_mutable_raw_str()->::aapt::pb::RawString::MergeFrom(
          from._internal_raw_str());
      break;
    }
    case kStyledStr: {
      _this->_internal_mutable_styled_str()->::aapt::pb::StyledString::MergeFrom(
          from._internal_styled_str());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::aapt::pb::FileReference::MergeFrom(
          from._internal_file());
      break;
    }
    case kId: {
      _this->_internal_mutable_id()->::aapt::pb::Id::MergeFrom(
          from._internal_id());
      break;
    }
    case kPrim: {
      _this->_internal_mutable_prim()->::aapt::pb::Primitive::MergeFrom(
          from._internal_prim());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[17]);
}

// ===================================================================

class CompoundValue::_Internal {
 public:
  static const ::aapt::pb::Attribute& attr(const CompoundValue* msg);
  static const ::aapt::pb::Style& style(const CompoundValue* msg);
  static const ::aapt::pb::Styleable& styleable(const CompoundValue* msg);
  static const ::aapt::pb::Array& array(const CompoundValue* msg);
  static const ::aapt::pb::Plural& plural(const CompoundValue* msg);
};

const ::aapt::pb::Attribute&
CompoundValue::_Internal::attr(const CompoundValue* msg) {
  return *msg->_impl_.value_.attr_;
}
const ::aapt::pb::Style&
CompoundValue::_Internal::style(const CompoundValue* msg) {
  return *msg->_impl_.value_.style_;
}
const ::aapt::pb::Styleable&
CompoundValue::_Internal::styleable(const CompoundValue* msg) {
  return *msg->_impl_.value_.styleable_;
}
const ::aapt::pb::Array&
CompoundValue::_Internal::array(const CompoundValue* msg) {
  return *msg->_impl_.value_.array_;
}
const ::aapt::pb::Plural&
CompoundValue::_Internal::plural(const CompoundValue* msg) {
  return *msg->_impl_.value_.plural_;
}
void CompoundValue::set_allocated_attr(::aapt::pb::Attribute* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attr);
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    set_has_attr();
    _impl_.value_.attr_ = attr;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.attr)
}
void CompoundValue::set_allocated_style(::aapt::pb::Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    set_has_style();
    _impl_.value_.style_ = style;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.style)
}
void CompoundValue::set_allocated_styleable(::aapt::pb::Styleable* styleable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (styleable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(styleable);
    if (message_arena != submessage_arena) {
      styleable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styleable, submessage_arena);
    }
    set_has_styleable();
    _impl_.value_.styleable_ = styleable;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.styleable)
}
void CompoundValue::set_allocated_array(::aapt::pb::Array* array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(array);
    if (message_arena != submessage_arena) {
      array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array, submessage_arena);
    }
    set_has_array();
    _impl_.value_.array_ = array;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.array)
}
void CompoundValue::set_allocated_plural(::aapt::pb::Plural* plural) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (plural) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plural);
    if (message_arena != submessage_arena) {
      plural = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plural, submessage_arena);
    }
    set_has_plural();
    _impl_.value_.plural_ = plural;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.plural)
}
CompoundValue::CompoundValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.CompoundValue)
}
CompoundValue::CompoundValue(const CompoundValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompoundValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kAttr: {
      _this->_internal_mutable_attr()->::aapt::pb::Attribute::MergeFrom(
          from._internal_attr());
      break;
    }
    case kStyle: {
      _this->_internal_mutable_style()->::aapt::pb::Style::MergeFrom(
          from._internal_style());
      break;
    }
    case kStyleable: {
      _this->_internal_mutable_styleable()->::aapt::pb::Styleable::MergeFrom(
          from._internal_styleable());
      break;
    }
    case kArray: {
      _this->_internal_mutable_array()->::aapt::pb::Array::MergeFrom(
          from._internal_array());
      break;
    }
    case kPlural: {
      _this->_internal_mutable_plural()->::aapt::pb::Plural::MergeFrom(
          from._internal_plural());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.CompoundValue)
}

inline void CompoundValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

CompoundValue::~CompoundValue() {
  // @@protoc_insertion_point(destructor:aapt.pb.CompoundValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompoundValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void CompoundValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompoundValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.CompoundValue)
  switch (value_case()) {
    case kAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.attr_;
      }
      break;
    }
    case kStyle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.style_;
      }
      break;
    }
    case kStyleable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.styleable_;
      }
      break;
    }
    case kArray: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.array_;
      }
      break;
    }
    case kPlural: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.plural_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void CompoundValue::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.CompoundValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompoundValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Attribute attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Style style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Styleable styleable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_styleable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Array array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_array(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Plural plural = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_plural(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CompoundValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.CompoundValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Attribute attr = 1;
  if (_internal_has_attr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attr(this),
        _Internal::attr(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Style style = 2;
  if (_internal_has_style()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Styleable styleable = 3;
  if (_internal_has_styleable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::styleable(this),
        _Internal::styleable(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Array array = 4;
  if (_internal_has_array()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::array(this),
        _Internal::array(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Plural plural = 5;
  if (_internal_has_plural()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::plural(this),
        _Internal::plural(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.CompoundValue)
  return target;
}

size_t CompoundValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.CompoundValue)
  size_t total_size = 0;

  switch (value_case()) {
    // .aapt.pb.Attribute attr = 1;
    case kAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.attr_);
      break;
    }
    // .aapt.pb.Style style = 2;
    case kStyle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.style_);
      break;
    }
    // .aapt.pb.Styleable styleable = 3;
    case kStyleable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.styleable_);
      break;
    }
    // .aapt.pb.Array array = 4;
    case kArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.array_);
      break;
    }
    // .aapt.pb.Plural plural = 5;
    case kPlural: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.plural_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompoundValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompoundValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompoundValue::GetClassData() const { return &_class_data_; }


void CompoundValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompoundValue*>(&to_msg);
  auto& from = static_cast<const CompoundValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.CompoundValue)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kAttr: {
      _this->_internal_mutable_attr()->::aapt::pb::Attribute::MergeFrom(
          from._internal_attr());
      break;
    }
    case kStyle: {
      _this->_internal_mutable_style()->::aapt::pb::Style::MergeFrom(
          from._internal_style());
      break;
    }
    case kStyleable: {
      _this->_internal_mutable_styleable()->::aapt::pb::Styleable::MergeFrom(
          from._internal_styleable());
      break;
    }
    case kArray: {
      _this->_internal_mutable_array()->::aapt::pb::Array::MergeFrom(
          from._internal_array());
      break;
    }
    case kPlural: {
      _this->_internal_mutable_plural()->::aapt::pb::Plural::MergeFrom(
          from._internal_plural());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompoundValue::CopyFrom(const CompoundValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.CompoundValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompoundValue::IsInitialized() const {
  return true;
}

void CompoundValue::InternalSwap(CompoundValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompoundValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[18]);
}

// ===================================================================

class Boolean::_Internal {
 public:
};

Boolean::Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Boolean)
}
Boolean::Boolean(const Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Boolean* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Boolean)
}

inline void Boolean::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Boolean::~Boolean() {
  // @@protoc_insertion_point(destructor:aapt.pb.Boolean)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Boolean::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Boolean::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Boolean)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Boolean::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Boolean::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Boolean)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Boolean)
  return target;
}

size_t Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Boolean)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Boolean::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Boolean::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Boolean::GetClassData() const { return &_class_data_; }


void Boolean::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Boolean*>(&to_msg);
  auto& from = static_cast<const Boolean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Boolean)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Boolean::CopyFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boolean::IsInitialized() const {
  return true;
}

void Boolean::InternalSwap(Boolean* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Boolean::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[19]);
}

// ===================================================================

class Reference::_Internal {
 public:
  static const ::aapt::pb::Boolean& is_dynamic(const Reference* msg);
};

const ::aapt::pb::Boolean&
Reference::_Internal::is_dynamic(const Reference* msg) {
  return *msg->_impl_.is_dynamic_;
}
Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_dynamic_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.private__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_is_dynamic()) {
    _this->_impl_.is_dynamic_ = new ::aapt::pb::Boolean(*from._impl_.is_dynamic_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.private__) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.private__));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Reference)
}

inline void Reference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_dynamic_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.private__){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:aapt.pb.Reference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.is_dynamic_;
}

void Reference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Reference)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.is_dynamic_ != nullptr) {
    delete _impl_.is_dynamic_;
  }
  _impl_.is_dynamic_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.private__) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.private__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Reference.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::aapt::pb::Reference_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Reference.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool private = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Boolean is_dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_dynamic(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Reference::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Reference)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Reference.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bool private = 4;
  if (this->_internal_private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_private_(), target);
  }

  // .aapt.pb.Boolean is_dynamic = 5;
  if (this->_internal_has_is_dynamic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::is_dynamic(this),
        _Internal::is_dynamic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Reference)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .aapt.pb.Boolean is_dynamic = 5;
  if (this->_internal_has_is_dynamic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.is_dynamic_);
  }

  // .aapt.pb.Reference.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // bool private = 4;
  if (this->_internal_private_() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }


void Reference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reference*>(&to_msg);
  auto& from = static_cast<const Reference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Reference)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_is_dynamic()) {
    _this->_internal_mutable_is_dynamic()->::aapt::pb::Boolean::MergeFrom(
        from._internal_is_dynamic());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_private_() != 0) {
    _this->_internal_set_private_(from._internal_private_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reference, _impl_.private__)
      + sizeof(Reference::_impl_.private__)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Reference, _impl_.is_dynamic_)>(
          reinterpret_cast<char*>(&_impl_.is_dynamic_),
          reinterpret_cast<char*>(&other->_impl_.is_dynamic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[20]);
}

// ===================================================================

class Id::_Internal {
 public:
};

Id::Id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Id)
}
Id::Id(const Id& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Id* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Id)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Id::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Id::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Id::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[21]);
}

// ===================================================================

class String::_Internal {
 public:
};

String::String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.String)
}
String::String(const String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  String* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.String)
}

inline void String::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

String::~String() {
  // @@protoc_insertion_point(destructor:aapt.pb.String)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void String::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void String::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void String::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.String)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* String::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.String.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* String::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.String)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.String)
  return target;
}

size_t String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.String)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData String::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    String::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*String::GetClassData() const { return &_class_data_; }


void String::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<String*>(&to_msg);
  auto& from = static_cast<const String&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.String)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void String::CopyFrom(const String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  return true;
}

void String::InternalSwap(String* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata String::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[22]);
}

// ===================================================================

class RawString::_Internal {
 public:
};

RawString::RawString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.RawString)
}
RawString::RawString(const RawString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RawString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.RawString)
}

inline void RawString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RawString::~RawString() {
  // @@protoc_insertion_point(destructor:aapt.pb.RawString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void RawString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawString::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.RawString)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.RawString.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RawString::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.RawString)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.RawString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.RawString)
  return target;
}

size_t RawString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.RawString)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RawString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawString::GetClassData() const { return &_class_data_; }


void RawString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RawString*>(&to_msg);
  auto& from = static_cast<const RawString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.RawString)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawString::CopyFrom(const RawString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.RawString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawString::IsInitialized() const {
  return true;
}

void RawString::InternalSwap(RawString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RawString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[23]);
}

// ===================================================================

class StyledString_Span::_Internal {
 public:
};

StyledString_Span::StyledString_Span(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.StyledString.Span)
}
StyledString_Span::StyledString_Span(const StyledString_Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyledString_Span* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.first_char_){}
    , decltype(_impl_.last_char_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.first_char_, &from._impl_.first_char_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_char_) -
    reinterpret_cast<char*>(&_impl_.first_char_)) + sizeof(_impl_.last_char_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StyledString.Span)
}

inline void StyledString_Span::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.first_char_){0u}
    , decltype(_impl_.last_char_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StyledString_Span::~StyledString_Span() {
  // @@protoc_insertion_point(destructor:aapt.pb.StyledString.Span)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyledString_Span::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void StyledString_Span::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyledString_Span::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StyledString.Span)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  ::memset(&_impl_.first_char_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_char_) -
      reinterpret_cast<char*>(&_impl_.first_char_)) + sizeof(_impl_.last_char_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyledString_Span::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.StyledString.Span.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 first_char = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.first_char_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 last_char = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.last_char_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StyledString_Span::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StyledString.Span)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyledString.Span.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // uint32 first_char = 2;
  if (this->_internal_first_char() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first_char(), target);
  }

  // uint32 last_char = 3;
  if (this->_internal_last_char() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_char(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StyledString.Span)
  return target;
}

size_t StyledString_Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StyledString.Span)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // uint32 first_char = 2;
  if (this->_internal_first_char() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_char());
  }

  // uint32 last_char = 3;
  if (this->_internal_last_char() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_char());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyledString_Span::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyledString_Span::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyledString_Span::GetClassData() const { return &_class_data_; }


void StyledString_Span::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyledString_Span*>(&to_msg);
  auto& from = static_cast<const StyledString_Span&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StyledString.Span)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_first_char() != 0) {
    _this->_internal_set_first_char(from._internal_first_char());
  }
  if (from._internal_last_char() != 0) {
    _this->_internal_set_last_char(from._internal_last_char());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyledString_Span::CopyFrom(const StyledString_Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StyledString.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledString_Span::IsInitialized() const {
  return true;
}

void StyledString_Span::InternalSwap(StyledString_Span* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyledString_Span, _impl_.last_char_)
      + sizeof(StyledString_Span::_impl_.last_char_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(StyledString_Span, _impl_.first_char_)>(
          reinterpret_cast<char*>(&_impl_.first_char_),
          reinterpret_cast<char*>(&other->_impl_.first_char_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyledString_Span::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[24]);
}

// ===================================================================

class StyledString::_Internal {
 public:
};

StyledString::StyledString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.StyledString)
}
StyledString::StyledString(const StyledString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyledString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.span_){from._impl_.span_}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StyledString)
}

inline void StyledString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.span_){arena}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StyledString::~StyledString() {
  // @@protoc_insertion_point(destructor:aapt.pb.StyledString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyledString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.span_.~RepeatedPtrField();
  _impl_.value_.Destroy();
}

void StyledString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyledString::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StyledString)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.span_.Clear();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyledString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.StyledString.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.StyledString.Span span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_span(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StyledString::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StyledString)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyledString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // repeated .aapt.pb.StyledString.Span span = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_span_size()); i < n; i++) {
    const auto& repfield = this->_internal_span(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StyledString)
  return target;
}

size_t StyledString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StyledString)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.StyledString.Span span = 2;
  total_size += 1UL * this->_internal_span_size();
  for (const auto& msg : this->_impl_.span_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyledString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyledString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyledString::GetClassData() const { return &_class_data_; }


void StyledString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyledString*>(&to_msg);
  auto& from = static_cast<const StyledString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StyledString)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.span_.MergeFrom(from._impl_.span_);
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyledString::CopyFrom(const StyledString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StyledString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledString::IsInitialized() const {
  return true;
}

void StyledString::InternalSwap(StyledString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.span_.InternalSwap(&other->_impl_.span_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StyledString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[25]);
}

// ===================================================================

class FileReference::_Internal {
 public:
};

FileReference::FileReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.FileReference)
}
FileReference::FileReference(const FileReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.FileReference)
}

inline void FileReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileReference::~FileReference() {
  // @@protoc_insertion_point(destructor:aapt.pb.FileReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void FileReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileReference::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.FileReference)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.FileReference.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.FileReference.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::aapt::pb::FileReference_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileReference::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.FileReference)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.FileReference.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .aapt.pb.FileReference.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.FileReference)
  return target;
}

size_t FileReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.FileReference)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .aapt.pb.FileReference.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileReference::GetClassData() const { return &_class_data_; }


void FileReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileReference*>(&to_msg);
  auto& from = static_cast<const FileReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.FileReference)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileReference::CopyFrom(const FileReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.FileReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileReference::IsInitialized() const {
  return true;
}

void FileReference::InternalSwap(FileReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[26]);
}

// ===================================================================

class Primitive_NullType::_Internal {
 public:
};

Primitive_NullType::Primitive_NullType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Primitive.NullType)
}
Primitive_NullType::Primitive_NullType(const Primitive_NullType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Primitive_NullType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Primitive.NullType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Primitive_NullType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Primitive_NullType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Primitive_NullType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[27]);
}

// ===================================================================

class Primitive_EmptyType::_Internal {
 public:
};

Primitive_EmptyType::Primitive_EmptyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Primitive.EmptyType)
}
Primitive_EmptyType::Primitive_EmptyType(const Primitive_EmptyType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Primitive_EmptyType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Primitive.EmptyType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Primitive_EmptyType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Primitive_EmptyType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Primitive_EmptyType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[28]);
}

// ===================================================================

class Primitive::_Internal {
 public:
  static const ::aapt::pb::Primitive_NullType& null_value(const Primitive* msg);
  static const ::aapt::pb::Primitive_EmptyType& empty_value(const Primitive* msg);
};

const ::aapt::pb::Primitive_NullType&
Primitive::_Internal::null_value(const Primitive* msg) {
  return *msg->_impl_.oneof_value_.null_value_;
}
const ::aapt::pb::Primitive_EmptyType&
Primitive::_Internal::empty_value(const Primitive* msg) {
  return *msg->_impl_.oneof_value_.empty_value_;
}
void Primitive::set_allocated_null_value(::aapt::pb::Primitive_NullType* null_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_value();
  if (null_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(null_value);
    if (message_arena != submessage_arena) {
      null_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_value, submessage_arena);
    }
    set_has_null_value();
    _impl_.oneof_value_.null_value_ = null_value;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Primitive.null_value)
}
void Primitive::set_allocated_empty_value(::aapt::pb::Primitive_EmptyType* empty_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_value();
  if (empty_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_value);
    if (message_arena != submessage_arena) {
      empty_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_value, submessage_arena);
    }
    set_has_empty_value();
    _impl_.oneof_value_.empty_value_ = empty_value;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Primitive.empty_value)
}
Primitive::Primitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Primitive)
}
Primitive::Primitive(const Primitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Primitive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oneof_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof_value();
  switch (from.oneof_value_case()) {
    case kNullValue: {
      _this->_internal_mutable_null_value()->::aapt::pb::Primitive_NullType::MergeFrom(
          from._internal_null_value());
      break;
    }
    case kEmptyValue: {
      _this->_internal_mutable_empty_value()->::aapt::pb::Primitive_EmptyType::MergeFrom(
          from._internal_empty_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDimensionValue: {
      _this->_internal_set_dimension_value(from._internal_dimension_value());
      break;
    }
    case kFractionValue: {
      _this->_internal_set_fraction_value(from._internal_fraction_value());
      break;
    }
    case kIntDecimalValue: {
      _this->_internal_set_int_decimal_value(from._internal_int_decimal_value());
      break;
    }
    case kIntHexadecimalValue: {
      _this->_internal_set_int_hexadecimal_value(from._internal_int_hexadecimal_value());
      break;
    }
    case kBooleanValue: {
      _this->_internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kColorArgb8Value: {
      _this->_internal_set_color_argb8_value(from._internal_color_argb8_value());
      break;
    }
    case kColorRgb8Value: {
      _this->_internal_set_color_rgb8_value(from._internal_color_rgb8_value());
      break;
    }
    case kColorArgb4Value: {
      _this->_internal_set_color_argb4_value(from._internal_color_argb4_value());
      break;
    }
    case kColorRgb4Value: {
      _this->_internal_set_color_rgb4_value(from._internal_color_rgb4_value());
      break;
    }
    case kDimensionValueDeprecated: {
      _this->_internal_set_dimension_value_deprecated(from._internal_dimension_value_deprecated());
      break;
    }
    case kFractionValueDeprecated: {
      _this->_internal_set_fraction_value_deprecated(from._internal_fraction_value_deprecated());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Primitive)
}

inline void Primitive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.oneof_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_oneof_value();
}

Primitive::~Primitive() {
  // @@protoc_insertion_point(destructor:aapt.pb.Primitive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Primitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof_value()) {
    clear_oneof_value();
  }
}

void Primitive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Primitive::clear_oneof_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.Primitive)
  switch (oneof_value_case()) {
    case kNullValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_value_.null_value_;
      }
      break;
    }
    case kEmptyValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_value_.empty_value_;
      }
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDimensionValue: {
      // No need to clear
      break;
    }
    case kFractionValue: {
      // No need to clear
      break;
    }
    case kIntDecimalValue: {
      // No need to clear
      break;
    }
    case kIntHexadecimalValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kColorArgb8Value: {
      // No need to clear
      break;
    }
    case kColorRgb8Value: {
      // No need to clear
      break;
    }
    case kColorArgb4Value: {
      // No need to clear
      break;
    }
    case kColorRgb4Value: {
      // No need to clear
      break;
    }
    case kDimensionValueDeprecated: {
      // No need to clear
      break;
    }
    case kFractionValueDeprecated: {
      // No need to clear
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ONEOF_VALUE_NOT_SET;
}


void Primitive::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Primitive)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Primitive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Primitive.NullType null_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_null_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Primitive.EmptyType empty_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float dimension_value_deprecated = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _internal_set_dimension_value_deprecated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float fraction_value_deprecated = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _internal_set_fraction_value_deprecated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 int_decimal_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _internal_set_int_decimal_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 int_hexadecimal_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _internal_set_int_hexadecimal_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool boolean_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _internal_set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color_argb8_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _internal_set_color_argb8_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color_rgb8_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _internal_set_color_rgb8_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color_argb4_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _internal_set_color_argb4_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color_rgb4_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _internal_set_color_rgb4_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 dimension_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _internal_set_dimension_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 fraction_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _internal_set_fraction_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Primitive::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Primitive)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Primitive.NullType null_value = 1;
  if (_internal_has_null_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::null_value(this),
        _Internal::null_value(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Primitive.EmptyType empty_value = 2;
  if (_internal_has_empty_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::empty_value(this),
        _Internal::empty_value(this).GetCachedSize(), target, stream);
  }

  // float float_value = 3;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  // float dimension_value_deprecated = 4 [deprecated = true];
  if (_internal_has_dimension_value_deprecated()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dimension_value_deprecated(), target);
  }

  // float fraction_value_deprecated = 5 [deprecated = true];
  if (_internal_has_fraction_value_deprecated()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fraction_value_deprecated(), target);
  }

  // int32 int_decimal_value = 6;
  if (_internal_has_int_decimal_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_int_decimal_value(), target);
  }

  // uint32 int_hexadecimal_value = 7;
  if (_internal_has_int_hexadecimal_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_int_hexadecimal_value(), target);
  }

  // bool boolean_value = 8;
  if (_internal_has_boolean_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_boolean_value(), target);
  }

  // uint32 color_argb8_value = 9;
  if (_internal_has_color_argb8_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_color_argb8_value(), target);
  }

  // uint32 color_rgb8_value = 10;
  if (_internal_has_color_rgb8_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_color_rgb8_value(), target);
  }

  // uint32 color_argb4_value = 11;
  if (_internal_has_color_argb4_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_color_argb4_value(), target);
  }

  // uint32 color_rgb4_value = 12;
  if (_internal_has_color_rgb4_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_color_rgb4_value(), target);
  }

  // uint32 dimension_value = 13;
  if (_internal_has_dimension_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_dimension_value(), target);
  }

  // uint32 fraction_value = 14;
  if (_internal_has_fraction_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_fraction_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Primitive)
  return target;
}

size_t Primitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Primitive)
  size_t total_size = 0;

  switch (oneof_value_case()) {
    // .aapt.pb.Primitive.NullType null_value = 1;
    case kNullValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_value_.null_value_);
      break;
    }
    // .aapt.pb.Primitive.EmptyType empty_value = 2;
    case kEmptyValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_value_.empty_value_);
      break;
    }
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // uint32 dimension_value = 13;
    case kDimensionValue: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dimension_value());
      break;
    }
    // uint32 fraction_value = 14;
    case kFractionValue: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fraction_value());
      break;
    }
    // int32 int_decimal_value = 6;
    case kIntDecimalValue: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_decimal_value());
      break;
    }
    // uint32 int_hexadecimal_value = 7;
    case kIntHexadecimalValue: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_int_hexadecimal_value());
      break;
    }
    // bool boolean_value = 8;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // uint32 color_argb8_value = 9;
    case kColorArgb8Value: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_argb8_value());
      break;
    }
    // uint32 color_rgb8_value = 10;
    case kColorRgb8Value: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_rgb8_value());
      break;
    }
    // uint32 color_argb4_value = 11;
    case kColorArgb4Value: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_argb4_value());
      break;
    }
    // uint32 color_rgb4_value = 12;
    case kColorRgb4Value: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_rgb4_value());
      break;
    }
    // float dimension_value_deprecated = 4 [deprecated = true];
    case kDimensionValueDeprecated: {
      total_size += 1 + 4;
      break;
    }
    // float fraction_value_deprecated = 5 [deprecated = true];
    case kFractionValueDeprecated: {
      total_size += 1 + 4;
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Primitive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Primitive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Primitive::GetClassData() const { return &_class_data_; }


void Primitive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Primitive*>(&to_msg);
  auto& from = static_cast<const Primitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Primitive)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_value_case()) {
    case kNullValue: {
      _this->_internal_mutable_null_value()->::aapt::pb::Primitive_NullType::MergeFrom(
          from._internal_null_value());
      break;
    }
    case kEmptyValue: {
      _this->_internal_mutable_empty_value()->::aapt::pb::Primitive_EmptyType::MergeFrom(
          from._internal_empty_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDimensionValue: {
      _this->_internal_set_dimension_value(from._internal_dimension_value());
      break;
    }
    case kFractionValue: {
      _this->_internal_set_fraction_value(from._internal_fraction_value());
      break;
    }
    case kIntDecimalValue: {
      _this->_internal_set_int_decimal_value(from._internal_int_decimal_value());
      break;
    }
    case kIntHexadecimalValue: {
      _this->_internal_set_int_hexadecimal_value(from._internal_int_hexadecimal_value());
      break;
    }
    case kBooleanValue: {
      _this->_internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kColorArgb8Value: {
      _this->_internal_set_color_argb8_value(from._internal_color_argb8_value());
      break;
    }
    case kColorRgb8Value: {
      _this->_internal_set_color_rgb8_value(from._internal_color_rgb8_value());
      break;
    }
    case kColorArgb4Value: {
      _this->_internal_set_color_argb4_value(from._internal_color_argb4_value());
      break;
    }
    case kColorRgb4Value: {
      _this->_internal_set_color_rgb4_value(from._internal_color_rgb4_value());
      break;
    }
    case kDimensionValueDeprecated: {
      _this->_internal_set_dimension_value_deprecated(from._internal_dimension_value_deprecated());
      break;
    }
    case kFractionValueDeprecated: {
      _this->_internal_set_fraction_value_deprecated(from._internal_fraction_value_deprecated());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Primitive::CopyFrom(const Primitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Primitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Primitive::IsInitialized() const {
  return true;
}

void Primitive::InternalSwap(Primitive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.oneof_value_, other->_impl_.oneof_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Primitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[29]);
}

// ===================================================================

class Attribute_Symbol::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Attribute_Symbol* msg);
  static const ::aapt::pb::Reference& name(const Attribute_Symbol* msg);
};

const ::aapt::pb::Source&
Attribute_Symbol::_Internal::source(const Attribute_Symbol* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Reference&
Attribute_Symbol::_Internal::name(const Attribute_Symbol* msg) {
  return *msg->_impl_.name_;
}
Attribute_Symbol::Attribute_Symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Attribute.Symbol)
}
Attribute_Symbol::Attribute_Symbol(const Attribute_Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attribute_Symbol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.name_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  if (from._internal_has_name()) {
    _this->_impl_.name_ = new ::aapt::pb::Reference(*from._impl_.name_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Attribute.Symbol)
}

inline void Attribute_Symbol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.name_){nullptr}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Attribute_Symbol::~Attribute_Symbol() {
  // @@protoc_insertion_point(destructor:aapt.pb.Attribute.Symbol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attribute_Symbol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.name_;
}

void Attribute_Symbol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attribute_Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Attribute.Symbol)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribute_Symbol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Attribute.Symbol.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Reference name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Attribute_Symbol::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Attribute.Symbol)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Attribute.Symbol.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // .aapt.pb.Reference name = 3;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // uint32 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_value(), target);
  }

  // uint32 type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Attribute.Symbol)
  return target;
}

size_t Attribute_Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Attribute.Symbol)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Reference name = 3;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_);
  }

  // uint32 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  // uint32 type = 5;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attribute_Symbol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attribute_Symbol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attribute_Symbol::GetClassData() const { return &_class_data_; }


void Attribute_Symbol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attribute_Symbol*>(&to_msg);
  auto& from = static_cast<const Attribute_Symbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Attribute.Symbol)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_name()) {
    _this->_internal_mutable_name()->::aapt::pb::Reference::MergeFrom(
        from._internal_name());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attribute_Symbol::CopyFrom(const Attribute_Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Attribute.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute_Symbol::IsInitialized() const {
  return true;
}

void Attribute_Symbol::InternalSwap(Attribute_Symbol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attribute_Symbol, _impl_.type_)
      + sizeof(Attribute_Symbol::_impl_.type_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Attribute_Symbol, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute_Symbol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[30]);
}

// ===================================================================

class Attribute::_Internal {
 public:
};

Attribute::Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_){from._impl_.symbol_}
    , decltype(_impl_.format_flags_){}
    , decltype(_impl_.min_int_){}
    , decltype(_impl_.max_int_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.format_flags_, &from._impl_.format_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_int_) -
    reinterpret_cast<char*>(&_impl_.format_flags_)) + sizeof(_impl_.max_int_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Attribute)
}

inline void Attribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_){arena}
    , decltype(_impl_.format_flags_){0u}
    , decltype(_impl_.min_int_){0}
    , decltype(_impl_.max_int_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:aapt.pb.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.~RepeatedPtrField();
}

void Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Attribute)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.Clear();
  ::memset(&_impl_.format_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_int_) -
      reinterpret_cast<char*>(&_impl_.format_flags_)) + sizeof(_impl_.max_int_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 format_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.format_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 min_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.min_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 max_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.max_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.Attribute.Symbol symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_symbol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Attribute::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Attribute)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 format_flags = 1;
  if (this->_internal_format_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_flags(), target);
  }

  // int32 min_int = 2;
  if (this->_internal_min_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_int(), target);
  }

  // int32 max_int = 3;
  if (this->_internal_max_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_int(), target);
  }

  // repeated .aapt.pb.Attribute.Symbol symbol = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_symbol_size()); i < n; i++) {
    const auto& repfield = this->_internal_symbol(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Attribute)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Attribute.Symbol symbol = 4;
  total_size += 1UL * this->_internal_symbol_size();
  for (const auto& msg : this->_impl_.symbol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 format_flags = 1;
  if (this->_internal_format_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_flags());
  }

  // int32 min_int = 2;
  if (this->_internal_min_int() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_int());
  }

  // int32 max_int = 3;
  if (this->_internal_max_int() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attribute::GetClassData() const { return &_class_data_; }


void Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attribute*>(&to_msg);
  auto& from = static_cast<const Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Attribute)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.symbol_.MergeFrom(from._impl_.symbol_);
  if (from._internal_format_flags() != 0) {
    _this->_internal_set_format_flags(from._internal_format_flags());
  }
  if (from._internal_min_int() != 0) {
    _this->_internal_set_min_int(from._internal_min_int());
  }
  if (from._internal_max_int() != 0) {
    _this->_internal_set_max_int(from._internal_max_int());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.symbol_.InternalSwap(&other->_impl_.symbol_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attribute, _impl_.max_int_)
      + sizeof(Attribute::_impl_.max_int_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Attribute, _impl_.format_flags_)>(
          reinterpret_cast<char*>(&_impl_.format_flags_),
          reinterpret_cast<char*>(&other->_impl_.format_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[31]);
}

// ===================================================================

class Style_Entry::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Style_Entry* msg);
  static const ::aapt::pb::Reference& key(const Style_Entry* msg);
  static const ::aapt::pb::Item& item(const Style_Entry* msg);
};

const ::aapt::pb::Source&
Style_Entry::_Internal::source(const Style_Entry* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Reference&
Style_Entry::_Internal::key(const Style_Entry* msg) {
  return *msg->_impl_.key_;
}
const ::aapt::pb::Item&
Style_Entry::_Internal::item(const Style_Entry* msg) {
  return *msg->_impl_.item_;
}
Style_Entry::Style_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Style.Entry)
}
Style_Entry::Style_Entry(const Style_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Style_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::aapt::pb::Reference(*from._impl_.key_);
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::aapt::pb::Item(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Style.Entry)
}

inline void Style_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Style_Entry::~Style_Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Style.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Style_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.item_;
}

void Style_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Style_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Style.Entry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Style_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Style.Entry.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Reference key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Style_Entry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Style.Entry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Style.Entry.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // .aapt.pb.Reference key = 3;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Item item = 4;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Style.Entry)
  return target;
}

size_t Style_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Style.Entry)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Reference key = 3;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // .aapt.pb.Item item = 4;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Style_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Style_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Style_Entry::GetClassData() const { return &_class_data_; }


void Style_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Style_Entry*>(&to_msg);
  auto& from = static_cast<const Style_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Style.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::aapt::pb::Reference::MergeFrom(
        from._internal_key());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::aapt::pb::Item::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Style_Entry::CopyFrom(const Style_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Style.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Style_Entry::IsInitialized() const {
  return true;
}

void Style_Entry::InternalSwap(Style_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Style_Entry, _impl_.item_)
      + sizeof(Style_Entry::_impl_.item_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Style_Entry, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Style_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[32]);
}

// ===================================================================

class Style::_Internal {
 public:
  static const ::aapt::pb::Reference& parent(const Style* msg);
  static const ::aapt::pb::Source& parent_source(const Style* msg);
};

const ::aapt::pb::Reference&
Style::_Internal::parent(const Style* msg) {
  return *msg->_impl_.parent_;
}
const ::aapt::pb::Source&
Style::_Internal::parent_source(const Style* msg) {
  return *msg->_impl_.parent_source_;
}
Style::Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Style)
}
Style::Style(const Style& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Style* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.parent_source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::aapt::pb::Reference(*from._impl_.parent_);
  }
  if (from._internal_has_parent_source()) {
    _this->_impl_.parent_source_ = new ::aapt::pb::Source(*from._impl_.parent_source_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Style)
}

inline void Style::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.parent_source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Style::~Style() {
  // @@protoc_insertion_point(destructor:aapt.pb.Style)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Style::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.parent_source_;
}

void Style::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Style::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Style)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.parent_ != nullptr) {
    delete _impl_.parent_;
  }
  _impl_.parent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.parent_source_ != nullptr) {
    delete _impl_.parent_source_;
  }
  _impl_.parent_source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Style::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Reference parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Source parent_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.Style.Entry entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Style::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Style)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference parent = 1;
  if (this->_internal_has_parent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent(this),
        _Internal::parent(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.Source parent_source = 2;
  if (this->_internal_has_parent_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parent_source(this),
        _Internal::parent_source(this).GetCachedSize(), target, stream);
  }

  // repeated .aapt.pb.Style.Entry entry = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Style)
  return target;
}

size_t Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Style)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Style.Entry entry = 3;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aapt.pb.Reference parent = 1;
  if (this->_internal_has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_);
  }

  // .aapt.pb.Source parent_source = 2;
  if (this->_internal_has_parent_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Style::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Style::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Style::GetClassData() const { return &_class_data_; }


void Style::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Style*>(&to_msg);
  auto& from = static_cast<const Style&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Style)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  if (from._internal_has_parent()) {
    _this->_internal_mutable_parent()->::aapt::pb::Reference::MergeFrom(
        from._internal_parent());
  }
  if (from._internal_has_parent_source()) {
    _this->_internal_mutable_parent_source()->::aapt::pb::Source::MergeFrom(
        from._internal_parent_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Style::CopyFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Style::IsInitialized() const {
  return true;
}

void Style::InternalSwap(Style* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Style, _impl_.parent_source_)
      + sizeof(Style::_impl_.parent_source_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Style, _impl_.parent_)>(
          reinterpret_cast<char*>(&_impl_.parent_),
          reinterpret_cast<char*>(&other->_impl_.parent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Style::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[33]);
}

// ===================================================================

class Styleable_Entry::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Styleable_Entry* msg);
  static const ::aapt::pb::Reference& attr(const Styleable_Entry* msg);
};

const ::aapt::pb::Source&
Styleable_Entry::_Internal::source(const Styleable_Entry* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Reference&
Styleable_Entry::_Internal::attr(const Styleable_Entry* msg) {
  return *msg->_impl_.attr_;
}
Styleable_Entry::Styleable_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Styleable.Entry)
}
Styleable_Entry::Styleable_Entry(const Styleable_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Styleable_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.attr_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  if (from._internal_has_attr()) {
    _this->_impl_.attr_ = new ::aapt::pb::Reference(*from._impl_.attr_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Styleable.Entry)
}

inline void Styleable_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.attr_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Styleable_Entry::~Styleable_Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Styleable.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Styleable_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.attr_;
}

void Styleable_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Styleable_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Styleable.Entry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attr_ != nullptr) {
    delete _impl_.attr_;
  }
  _impl_.attr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Styleable_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Styleable.Entry.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Reference attr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Styleable_Entry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Styleable.Entry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Styleable.Entry.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // .aapt.pb.Reference attr = 3;
  if (this->_internal_has_attr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::attr(this),
        _Internal::attr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Styleable.Entry)
  return target;
}

size_t Styleable_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Styleable.Entry)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Reference attr = 3;
  if (this->_internal_has_attr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Styleable_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Styleable_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Styleable_Entry::GetClassData() const { return &_class_data_; }


void Styleable_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Styleable_Entry*>(&to_msg);
  auto& from = static_cast<const Styleable_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Styleable.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_attr()) {
    _this->_internal_mutable_attr()->::aapt::pb::Reference::MergeFrom(
        from._internal_attr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Styleable_Entry::CopyFrom(const Styleable_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Styleable.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Styleable_Entry::IsInitialized() const {
  return true;
}

void Styleable_Entry::InternalSwap(Styleable_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Styleable_Entry, _impl_.attr_)
      + sizeof(Styleable_Entry::_impl_.attr_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Styleable_Entry, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Styleable_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[34]);
}

// ===================================================================

class Styleable::_Internal {
 public:
};

Styleable::Styleable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Styleable)
}
Styleable::Styleable(const Styleable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Styleable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Styleable)
}

inline void Styleable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Styleable::~Styleable() {
  // @@protoc_insertion_point(destructor:aapt.pb.Styleable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Styleable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void Styleable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Styleable::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Styleable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Styleable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aapt.pb.Styleable.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Styleable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Styleable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Styleable.Entry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Styleable)
  return target;
}

size_t Styleable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Styleable)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Styleable.Entry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Styleable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Styleable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Styleable::GetClassData() const { return &_class_data_; }


void Styleable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Styleable*>(&to_msg);
  auto& from = static_cast<const Styleable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Styleable)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Styleable::CopyFrom(const Styleable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Styleable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Styleable::IsInitialized() const {
  return true;
}

void Styleable::InternalSwap(Styleable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Styleable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[35]);
}

// ===================================================================

class Array_Element::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Array_Element* msg);
  static const ::aapt::pb::Item& item(const Array_Element* msg);
};

const ::aapt::pb::Source&
Array_Element::_Internal::source(const Array_Element* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Item&
Array_Element::_Internal::item(const Array_Element* msg) {
  return *msg->_impl_.item_;
}
Array_Element::Array_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Array.Element)
}
Array_Element::Array_Element(const Array_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Array_Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::aapt::pb::Item(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Array.Element)
}

inline void Array_Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Array_Element::~Array_Element() {
  // @@protoc_insertion_point(destructor:aapt.pb.Array.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Array_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.item_;
}

void Array_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Array_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Array.Element)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Array_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Array.Element.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Array_Element::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Array.Element)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Array.Element.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // .aapt.pb.Item item = 3;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Array.Element)
  return target;
}

size_t Array_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Array.Element)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Item item = 3;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Array_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Array_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Array_Element::GetClassData() const { return &_class_data_; }


void Array_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Array_Element*>(&to_msg);
  auto& from = static_cast<const Array_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Array.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::aapt::pb::Item::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Array_Element::CopyFrom(const Array_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Array.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array_Element::IsInitialized() const {
  return true;
}

void Array_Element::InternalSwap(Array_Element* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Array_Element, _impl_.item_)
      + sizeof(Array_Element::_impl_.item_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Array_Element, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Array_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[36]);
}

// ===================================================================

class Array::_Internal {
 public:
};

Array::Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Array)
}
Array::Array(const Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Array* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.element_){from._impl_.element_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Array)
}

inline void Array::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.element_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:aapt.pb.Array)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedPtrField();
}

void Array::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Array)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Array::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aapt.pb.Array.Element element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Array::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Array)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Array.Element element = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Array)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Array.Element element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->_impl_.element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Array::GetClassData() const { return &_class_data_; }


void Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Array*>(&to_msg);
  auto& from = static_cast<const Array&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Array)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.element_.MergeFrom(from._impl_.element_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  return true;
}

void Array::InternalSwap(Array* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Array::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[37]);
}

// ===================================================================

class Plural_Entry::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Plural_Entry* msg);
  static const ::aapt::pb::Item& item(const Plural_Entry* msg);
};

const ::aapt::pb::Source&
Plural_Entry::_Internal::source(const Plural_Entry* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Item&
Plural_Entry::_Internal::item(const Plural_Entry* msg) {
  return *msg->_impl_.item_;
}
Plural_Entry::Plural_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Plural.Entry)
}
Plural_Entry::Plural_Entry(const Plural_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Plural_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.arity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::Source(*from._impl_.source_);
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::aapt::pb::Item(*from._impl_.item_);
  }
  _this->_impl_.arity_ = from._impl_.arity_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Plural.Entry)
}

inline void Plural_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.arity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Plural_Entry::~Plural_Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Plural.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Plural_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.item_;
}

void Plural_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Plural_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Plural.Entry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.arity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plural_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.Plural.Entry.comment"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Plural.Arity arity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arity(static_cast<::aapt::pb::Plural_Arity>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Plural_Entry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Plural.Entry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Plural.Entry.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // .aapt.pb.Plural.Arity arity = 3;
  if (this->_internal_arity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_arity(), target);
  }

  // .aapt.pb.Item item = 4;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Plural.Entry)
  return target;
}

size_t Plural_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Plural.Entry)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Item item = 4;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // .aapt.pb.Plural.Arity arity = 3;
  if (this->_internal_arity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_arity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plural_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Plural_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plural_Entry::GetClassData() const { return &_class_data_; }


void Plural_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Plural_Entry*>(&to_msg);
  auto& from = static_cast<const Plural_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Plural.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::Source::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::aapt::pb::Item::MergeFrom(
        from._internal_item());
  }
  if (from._internal_arity() != 0) {
    _this->_internal_set_arity(from._internal_arity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plural_Entry::CopyFrom(const Plural_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Plural.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plural_Entry::IsInitialized() const {
  return true;
}

void Plural_Entry::InternalSwap(Plural_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plural_Entry, _impl_.arity_)
      + sizeof(Plural_Entry::_impl_.arity_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(Plural_Entry, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plural_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[38]);
}

// ===================================================================

class Plural::_Internal {
 public:
};

Plural::Plural(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.Plural)
}
Plural::Plural(const Plural& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Plural* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Plural)
}

inline void Plural::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Plural::~Plural() {
  // @@protoc_insertion_point(destructor:aapt.pb.Plural)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Plural::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void Plural::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Plural::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Plural)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plural::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aapt.pb.Plural.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Plural::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Plural)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Plural.Entry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Plural)
  return target;
}

size_t Plural::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Plural)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Plural.Entry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plural::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Plural::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plural::GetClassData() const { return &_class_data_; }


void Plural::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Plural*>(&to_msg);
  auto& from = static_cast<const Plural&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Plural)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plural::CopyFrom(const Plural& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Plural)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plural::IsInitialized() const {
  return true;
}

void Plural::InternalSwap(Plural* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plural::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[39]);
}

// ===================================================================

class XmlNode::_Internal {
 public:
  static const ::aapt::pb::XmlElement& element(const XmlNode* msg);
  static const ::aapt::pb::SourcePosition& source(const XmlNode* msg);
};

const ::aapt::pb::XmlElement&
XmlNode::_Internal::element(const XmlNode* msg) {
  return *msg->_impl_.node_.element_;
}
const ::aapt::pb::SourcePosition&
XmlNode::_Internal::source(const XmlNode* msg) {
  return *msg->_impl_.source_;
}
void XmlNode::set_allocated_element(::aapt::pb::XmlElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    set_has_element();
    _impl_.node_.element_ = element;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNode.element)
}
XmlNode::XmlNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.XmlNode)
}
XmlNode::XmlNode(const XmlNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XmlNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::SourcePosition(*from._impl_.source_);
  }
  clear_has_node();
  switch (from.node_case()) {
    case kElement: {
      _this->_internal_mutable_element()->::aapt::pb::XmlElement::MergeFrom(
          from._internal_element());
      break;
    }
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlNode)
}

inline void XmlNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

XmlNode::~XmlNode() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XmlNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_;
  if (has_node()) {
    clear_node();
  }
}

void XmlNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XmlNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.XmlNode)
  switch (node_case()) {
    case kElement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.element_;
      }
      break;
    }
    case kText: {
      _impl_.node_.text_.Destroy();
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void XmlNode::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlNode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  clear_node();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XmlNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aapt.pb.XmlElement element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlNode.text"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.SourcePosition source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* XmlNode::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlNode)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.XmlElement element = 1;
  if (_internal_has_element()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::element(this),
        _Internal::element(this).GetCachedSize(), target, stream);
  }

  // string text = 2;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNode.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlNode)
  return target;
}

size_t XmlNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlNode)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.SourcePosition source = 3;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  switch (node_case()) {
    // .aapt.pb.XmlElement element = 1;
    case kElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.element_);
      break;
    }
    // string text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XmlNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XmlNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XmlNode::GetClassData() const { return &_class_data_; }


void XmlNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XmlNode*>(&to_msg);
  auto& from = static_cast<const XmlNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlNode)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::SourcePosition::MergeFrom(
        from._internal_source());
  }
  switch (from.node_case()) {
    case kElement: {
      _this->_internal_mutable_element()->::aapt::pb::XmlElement::MergeFrom(
          from._internal_element());
      break;
    }
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XmlNode::CopyFrom(const XmlNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlNode::IsInitialized() const {
  return true;
}

void XmlNode::InternalSwap(XmlNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.source_, other->_impl_.source_);
  swap(_impl_.node_, other->_impl_.node_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[40]);
}

// ===================================================================

class XmlElement::_Internal {
 public:
};

XmlElement::XmlElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.XmlElement)
}
XmlElement::XmlElement(const XmlElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XmlElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace_declaration_){from._impl_.namespace_declaration_}
    , decltype(_impl_.attribute_){from._impl_.attribute_}
    , decltype(_impl_.child_){from._impl_.child_}
    , decltype(_impl_.namespace_uri_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_uri().empty()) {
    _this->_impl_.namespace_uri_.Set(from._internal_namespace_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlElement)
}

inline void XmlElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace_declaration_){arena}
    , decltype(_impl_.attribute_){arena}
    , decltype(_impl_.child_){arena}
    , decltype(_impl_.namespace_uri_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.namespace_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XmlElement::~XmlElement() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XmlElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.namespace_declaration_.~RepeatedPtrField();
  _impl_.attribute_.~RepeatedPtrField();
  _impl_.child_.~RepeatedPtrField();
  _impl_.namespace_uri_.Destroy();
  _impl_.name_.Destroy();
}

void XmlElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XmlElement::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlElement)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.namespace_declaration_.Clear();
  _impl_.attribute_.Clear();
  _impl_.child_.Clear();
  _impl_.namespace_uri_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XmlElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_namespace_declaration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string namespace_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlElement.namespace_uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlElement.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.XmlAttribute attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.XmlNode child = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* XmlElement::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlElement)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_namespace_declaration_size()); i < n; i++) {
    const auto& repfield = this->_internal_namespace_declaration(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string namespace_uri = 2;
  if (!this->_internal_namespace_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_uri().data(), static_cast<int>(this->_internal_namespace_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlElement.namespace_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_uri(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlElement.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .aapt.pb.XmlAttribute attribute = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aapt.pb.XmlNode child = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_size()); i < n; i++) {
    const auto& repfield = this->_internal_child(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlElement)
  return target;
}

size_t XmlElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlElement)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
  total_size += 1UL * this->_internal_namespace_declaration_size();
  for (const auto& msg : this->_impl_.namespace_declaration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aapt.pb.XmlAttribute attribute = 4;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_impl_.attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aapt.pb.XmlNode child = 5;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->_impl_.child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string namespace_uri = 2;
  if (!this->_internal_namespace_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_uri());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XmlElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XmlElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XmlElement::GetClassData() const { return &_class_data_; }


void XmlElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XmlElement*>(&to_msg);
  auto& from = static_cast<const XmlElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlElement)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.namespace_declaration_.MergeFrom(from._impl_.namespace_declaration_);
  _this->_impl_.attribute_.MergeFrom(from._impl_.attribute_);
  _this->_impl_.child_.MergeFrom(from._impl_.child_);
  if (!from._internal_namespace_uri().empty()) {
    _this->_internal_set_namespace_uri(from._internal_namespace_uri());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XmlElement::CopyFrom(const XmlElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlElement::IsInitialized() const {
  return true;
}

void XmlElement::InternalSwap(XmlElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.namespace_declaration_.InternalSwap(&other->_impl_.namespace_declaration_);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  _impl_.child_.InternalSwap(&other->_impl_.child_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace_uri_, lhs_arena,
      &other->_impl_.namespace_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[41]);
}

// ===================================================================

class XmlNamespace::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& source(const XmlNamespace* msg);
};

const ::aapt::pb::SourcePosition&
XmlNamespace::_Internal::source(const XmlNamespace* msg) {
  return *msg->_impl_.source_;
}
XmlNamespace::XmlNamespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.XmlNamespace)
}
XmlNamespace::XmlNamespace(const XmlNamespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XmlNamespace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prefix_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::SourcePosition(*from._impl_.source_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlNamespace)
}

inline void XmlNamespace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prefix_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XmlNamespace::~XmlNamespace() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlNamespace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XmlNamespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefix_.Destroy();
  _impl_.uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void XmlNamespace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XmlNamespace::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlNamespace)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefix_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XmlNamespace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlNamespace.prefix"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlNamespace.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.SourcePosition source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* XmlNamespace::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlNamespace)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNamespace.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNamespace.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlNamespace)
  return target;
}

size_t XmlNamespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlNamespace)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XmlNamespace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XmlNamespace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XmlNamespace::GetClassData() const { return &_class_data_; }


void XmlNamespace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XmlNamespace*>(&to_msg);
  auto& from = static_cast<const XmlNamespace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlNamespace)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::SourcePosition::MergeFrom(
        from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XmlNamespace::CopyFrom(const XmlNamespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlNamespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlNamespace::IsInitialized() const {
  return true;
}

void XmlNamespace::InternalSwap(XmlNamespace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_, lhs_arena,
      &other->_impl_.prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlNamespace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[42]);
}

// ===================================================================

class XmlAttribute::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& source(const XmlAttribute* msg);
  static const ::aapt::pb::Item& compiled_item(const XmlAttribute* msg);
};

const ::aapt::pb::SourcePosition&
XmlAttribute::_Internal::source(const XmlAttribute* msg) {
  return *msg->_impl_.source_;
}
const ::aapt::pb::Item&
XmlAttribute::_Internal::compiled_item(const XmlAttribute* msg) {
  return *msg->_impl_.compiled_item_;
}
XmlAttribute::XmlAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.XmlAttribute)
}
XmlAttribute::XmlAttribute(const XmlAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XmlAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace_uri_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.compiled_item_){nullptr}
    , decltype(_impl_.resource_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_uri().empty()) {
    _this->_impl_.namespace_uri_.Set(from._internal_namespace_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::SourcePosition(*from._impl_.source_);
  }
  if (from._internal_has_compiled_item()) {
    _this->_impl_.compiled_item_ = new ::aapt::pb::Item(*from._impl_.compiled_item_);
  }
  _this->_impl_.resource_id_ = from._impl_.resource_id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlAttribute)
}

inline void XmlAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace_uri_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.compiled_item_){nullptr}
    , decltype(_impl_.resource_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.namespace_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XmlAttribute::~XmlAttribute() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XmlAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.namespace_uri_.Destroy();
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.compiled_item_;
}

void XmlAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XmlAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlAttribute)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.namespace_uri_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.compiled_item_ != nullptr) {
    delete _impl_.compiled_item_;
  }
  _impl_.compiled_item_ = nullptr;
  _impl_.resource_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XmlAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string namespace_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlAttribute.namespace_uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlAttribute.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.XmlAttribute.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.SourcePosition source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 resource_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Item compiled_item = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_compiled_item(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* XmlAttribute::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlAttribute)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace_uri = 1;
  if (!this->_internal_namespace_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_uri().data(), static_cast<int>(this->_internal_namespace_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.namespace_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_uri(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // .aapt.pb.SourcePosition source = 4;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // uint32 resource_id = 5;
  if (this->_internal_resource_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_resource_id(), target);
  }

  // .aapt.pb.Item compiled_item = 6;
  if (this->_internal_has_compiled_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::compiled_item(this),
        _Internal::compiled_item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlAttribute)
  return target;
}

size_t XmlAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlAttribute)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace_uri = 1;
  if (!this->_internal_namespace_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_uri());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .aapt.pb.SourcePosition source = 4;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .aapt.pb.Item compiled_item = 6;
  if (this->_internal_has_compiled_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.compiled_item_);
  }

  // uint32 resource_id = 5;
  if (this->_internal_resource_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resource_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XmlAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XmlAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XmlAttribute::GetClassData() const { return &_class_data_; }


void XmlAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XmlAttribute*>(&to_msg);
  auto& from = static_cast<const XmlAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_namespace_uri().empty()) {
    _this->_internal_set_namespace_uri(from._internal_namespace_uri());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::SourcePosition::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_compiled_item()) {
    _this->_internal_mutable_compiled_item()->::aapt::pb::Item::MergeFrom(
        from._internal_compiled_item());
  }
  if (from._internal_resource_id() != 0) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XmlAttribute::CopyFrom(const XmlAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlAttribute::IsInitialized() const {
  return true;
}

void XmlAttribute::InternalSwap(XmlAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace_uri_, lhs_arena,
      &other->_impl_.namespace_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XmlAttribute, _impl_.resource_id_)
      + sizeof(XmlAttribute::_impl_.resource_id_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(XmlAttribute, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Resources_2eproto_getter, &descriptor_table_Resources_2eproto_once,
      file_level_metadata_Resources_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace aapt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aapt::pb::StringPool*
Arena::CreateMaybeMessage< ::aapt::pb::StringPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::StringPool >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::SourcePosition*
Arena::CreateMaybeMessage< ::aapt::pb::SourcePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::SourcePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Source*
Arena::CreateMaybeMessage< ::aapt::pb::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::ToolFingerprint*
Arena::CreateMaybeMessage< ::aapt::pb::ToolFingerprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::ToolFingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::ResourceTable*
Arena::CreateMaybeMessage< ::aapt::pb::ResourceTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::ResourceTable >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::PackageId*
Arena::CreateMaybeMessage< ::aapt::pb::PackageId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::PackageId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Package*
Arena::CreateMaybeMessage< ::aapt::pb::Package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::TypeId*
Arena::CreateMaybeMessage< ::aapt::pb::TypeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::TypeId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Type*
Arena::CreateMaybeMessage< ::aapt::pb::Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Visibility*
Arena::CreateMaybeMessage< ::aapt::pb::Visibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Visibility >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::AllowNew*
Arena::CreateMaybeMessage< ::aapt::pb::AllowNew >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::AllowNew >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Overlayable*
Arena::CreateMaybeMessage< ::aapt::pb::Overlayable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Overlayable >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::OverlayableItem*
Arena::CreateMaybeMessage< ::aapt::pb::OverlayableItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::OverlayableItem >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::EntryId*
Arena::CreateMaybeMessage< ::aapt::pb::EntryId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::EntryId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Entry*
Arena::CreateMaybeMessage< ::aapt::pb::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::ConfigValue*
Arena::CreateMaybeMessage< ::aapt::pb::ConfigValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::ConfigValue >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Value*
Arena::CreateMaybeMessage< ::aapt::pb::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Item*
Arena::CreateMaybeMessage< ::aapt::pb::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::CompoundValue*
Arena::CreateMaybeMessage< ::aapt::pb::CompoundValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::CompoundValue >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Boolean*
Arena::CreateMaybeMessage< ::aapt::pb::Boolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Reference*
Arena::CreateMaybeMessage< ::aapt::pb::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Id*
Arena::CreateMaybeMessage< ::aapt::pb::Id >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Id >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::String*
Arena::CreateMaybeMessage< ::aapt::pb::String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::String >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::RawString*
Arena::CreateMaybeMessage< ::aapt::pb::RawString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::RawString >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StyledString_Span*
Arena::CreateMaybeMessage< ::aapt::pb::StyledString_Span >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::StyledString_Span >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StyledString*
Arena::CreateMaybeMessage< ::aapt::pb::StyledString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::StyledString >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::FileReference*
Arena::CreateMaybeMessage< ::aapt::pb::FileReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::FileReference >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Primitive_NullType*
Arena::CreateMaybeMessage< ::aapt::pb::Primitive_NullType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Primitive_NullType >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Primitive_EmptyType*
Arena::CreateMaybeMessage< ::aapt::pb::Primitive_EmptyType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Primitive_EmptyType >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Primitive*
Arena::CreateMaybeMessage< ::aapt::pb::Primitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Primitive >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Attribute_Symbol*
Arena::CreateMaybeMessage< ::aapt::pb::Attribute_Symbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Attribute_Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Attribute*
Arena::CreateMaybeMessage< ::aapt::pb::Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Style_Entry*
Arena::CreateMaybeMessage< ::aapt::pb::Style_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Style_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Style*
Arena::CreateMaybeMessage< ::aapt::pb::Style >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Style >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Styleable_Entry*
Arena::CreateMaybeMessage< ::aapt::pb::Styleable_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Styleable_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Styleable*
Arena::CreateMaybeMessage< ::aapt::pb::Styleable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Styleable >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Array_Element*
Arena::CreateMaybeMessage< ::aapt::pb::Array_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Array_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Array*
Arena::CreateMaybeMessage< ::aapt::pb::Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Array >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Plural_Entry*
Arena::CreateMaybeMessage< ::aapt::pb::Plural_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Plural_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Plural*
Arena::CreateMaybeMessage< ::aapt::pb::Plural >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::Plural >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlNode*
Arena::CreateMaybeMessage< ::aapt::pb::XmlNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::XmlNode >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlElement*
Arena::CreateMaybeMessage< ::aapt::pb::XmlElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::XmlElement >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlNamespace*
Arena::CreateMaybeMessage< ::aapt::pb::XmlNamespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::XmlNamespace >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlAttribute*
Arena::CreateMaybeMessage< ::aapt::pb::XmlAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::XmlAttribute >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
