// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourcesInternal.proto

#include "ResourcesInternal.pb.h"

#include <algorithm>
#include <cstdint>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace aapt {
namespace pb {
namespace internal {
PROTOBUF_CONSTEXPR CompiledFile_Symbol::CompiledFile_Symbol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompiledFile_SymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompiledFile_SymbolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompiledFile_SymbolDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    CompiledFile_Symbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompiledFile_SymbolDefaultTypeInternal _CompiledFile_Symbol_default_instance_;
PROTOBUF_CONSTEXPR CompiledFile::CompiledFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exported_symbol_)*/{}
  , /*decltype(_impl_.resource_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompiledFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompiledFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompiledFileDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    CompiledFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompiledFileDefaultTypeInternal _CompiledFile_default_instance_;
}  // namespace internal
}  // namespace pb
}  // namespace aapt
static ::_pb::Metadata file_level_metadata_ResourcesInternal_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ResourcesInternal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ResourcesInternal_2eproto = nullptr;

const ::uint32_t TableStruct_ResourcesInternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile_Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile_Symbol, _impl_.resource_name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile_Symbol, _impl_.source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile, _impl_.resource_name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile, _impl_.source_path_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::internal::CompiledFile, _impl_.exported_symbol_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::aapt::pb::internal::CompiledFile_Symbol)},
  { 8, -1, -1, sizeof(::aapt::pb::internal::CompiledFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::aapt::pb::internal::_CompiledFile_Symbol_default_instance_._instance,
  &::aapt::pb::internal::_CompiledFile_default_instance_._instance,
};

const char descriptor_table_protodef_ResourcesInternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ResourcesInternal.proto\022\020aapt.pb.inter"
  "nal\032\023Configuration.proto\032\017Resources.prot"
  "o\"\227\002\n\014CompiledFile\022\025\n\rresource_name\030\001 \001("
  "\t\022&\n\006config\030\002 \001(\0132\026.aapt.pb.Configuratio"
  "n\022)\n\004type\030\003 \001(\0162\033.aapt.pb.FileReference."
  "Type\022\023\n\013source_path\030\004 \001(\t\022>\n\017exported_sy"
  "mbol\030\005 \003(\0132%.aapt.pb.internal.CompiledFi"
  "le.Symbol\032H\n\006Symbol\022\025\n\rresource_name\030\001 \001"
  "(\t\022\'\n\006source\030\002 \001(\0132\027.aapt.pb.SourcePosit"
  "ionB\032\n\030android.aapt.pb.internalb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ResourcesInternal_2eproto_deps[2] = {
  &::descriptor_table_Configuration_2eproto,
  &::descriptor_table_Resources_2eproto,
};
static ::_pbi::once_flag descriptor_table_ResourcesInternal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ResourcesInternal_2eproto = {
    false, false, 399, descriptor_table_protodef_ResourcesInternal_2eproto,
    "ResourcesInternal.proto",
    &descriptor_table_ResourcesInternal_2eproto_once, descriptor_table_ResourcesInternal_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_ResourcesInternal_2eproto::offsets,
    file_level_metadata_ResourcesInternal_2eproto, file_level_enum_descriptors_ResourcesInternal_2eproto,
    file_level_service_descriptors_ResourcesInternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ResourcesInternal_2eproto_getter() {
  return &descriptor_table_ResourcesInternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ResourcesInternal_2eproto(&descriptor_table_ResourcesInternal_2eproto);
namespace aapt {
namespace pb {
namespace internal {

// ===================================================================

class CompiledFile_Symbol::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& source(const CompiledFile_Symbol* msg);
};

const ::aapt::pb::SourcePosition&
CompiledFile_Symbol::_Internal::source(const CompiledFile_Symbol* msg) {
  return *msg->_impl_.source_;
}
void CompiledFile_Symbol::clear_source() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
}
CompiledFile_Symbol::CompiledFile_Symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.internal.CompiledFile.Symbol)
}
CompiledFile_Symbol::CompiledFile_Symbol(const CompiledFile_Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompiledFile_Symbol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_name_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_name().empty()) {
    _this->_impl_.resource_name_.Set(from._internal_resource_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::aapt::pb::SourcePosition(*from._impl_.source_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.internal.CompiledFile.Symbol)
}

inline void CompiledFile_Symbol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_name_){}
    , decltype(_impl_.source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompiledFile_Symbol::~CompiledFile_Symbol() {
  // @@protoc_insertion_point(destructor:aapt.pb.internal.CompiledFile.Symbol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompiledFile_Symbol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void CompiledFile_Symbol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompiledFile_Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.internal.CompiledFile.Symbol)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompiledFile_Symbol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.internal.CompiledFile.Symbol.resource_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.SourcePosition source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CompiledFile_Symbol::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.internal.CompiledFile.Symbol)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_name = 1;
  if (!this->_internal_resource_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_name().data(), static_cast<int>(this->_internal_resource_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.internal.CompiledFile.Symbol.resource_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_name(), target);
  }

  // .aapt.pb.SourcePosition source = 2;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.internal.CompiledFile.Symbol)
  return target;
}

size_t CompiledFile_Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.internal.CompiledFile.Symbol)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_name = 1;
  if (!this->_internal_resource_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_name());
  }

  // .aapt.pb.SourcePosition source = 2;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompiledFile_Symbol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompiledFile_Symbol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompiledFile_Symbol::GetClassData() const { return &_class_data_; }


void CompiledFile_Symbol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompiledFile_Symbol*>(&to_msg);
  auto& from = static_cast<const CompiledFile_Symbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.internal.CompiledFile.Symbol)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_name().empty()) {
    _this->_internal_set_resource_name(from._internal_resource_name());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::aapt::pb::SourcePosition::MergeFrom(
        from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompiledFile_Symbol::CopyFrom(const CompiledFile_Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.internal.CompiledFile.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledFile_Symbol::IsInitialized() const {
  return true;
}

void CompiledFile_Symbol::InternalSwap(CompiledFile_Symbol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_name_, lhs_arena,
      &other->_impl_.resource_name_, rhs_arena
  );
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompiledFile_Symbol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ResourcesInternal_2eproto_getter, &descriptor_table_ResourcesInternal_2eproto_once,
      file_level_metadata_ResourcesInternal_2eproto[0]);
}

// ===================================================================

class CompiledFile::_Internal {
 public:
  static const ::aapt::pb::Configuration& config(const CompiledFile* msg);
};

const ::aapt::pb::Configuration&
CompiledFile::_Internal::config(const CompiledFile* msg) {
  return *msg->_impl_.config_;
}
void CompiledFile::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
CompiledFile::CompiledFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aapt.pb.internal.CompiledFile)
}
CompiledFile::CompiledFile(const CompiledFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompiledFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exported_symbol_){from._impl_.exported_symbol_}
    , decltype(_impl_.resource_name_){}
    , decltype(_impl_.source_path_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_name().empty()) {
    _this->_impl_.resource_name_.Set(from._internal_resource_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_path().empty()) {
    _this->_impl_.source_path_.Set(from._internal_source_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::aapt::pb::Configuration(*from._impl_.config_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.internal.CompiledFile)
}

inline void CompiledFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exported_symbol_){arena}
    , decltype(_impl_.resource_name_){}
    , decltype(_impl_.source_path_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompiledFile::~CompiledFile() {
  // @@protoc_insertion_point(destructor:aapt.pb.internal.CompiledFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompiledFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exported_symbol_.~RepeatedPtrField();
  _impl_.resource_name_.Destroy();
  _impl_.source_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void CompiledFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompiledFile::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.internal.CompiledFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exported_symbol_.Clear();
  _impl_.resource_name_.ClearToEmpty();
  _impl_.source_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompiledFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.internal.CompiledFile.resource_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.Configuration config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aapt.pb.FileReference.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::aapt::pb::FileReference_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aapt.pb.internal.CompiledFile.source_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aapt.pb.internal.CompiledFile.Symbol exported_symbol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exported_symbol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CompiledFile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.internal.CompiledFile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_name = 1;
  if (!this->_internal_resource_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_name().data(), static_cast<int>(this->_internal_resource_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.internal.CompiledFile.resource_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_name(), target);
  }

  // .aapt.pb.Configuration config = 2;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // .aapt.pb.FileReference.Type type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string source_path = 4;
  if (!this->_internal_source_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_path().data(), static_cast<int>(this->_internal_source_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.internal.CompiledFile.source_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source_path(), target);
  }

  // repeated .aapt.pb.internal.CompiledFile.Symbol exported_symbol = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exported_symbol_size()); i < n; i++) {
    const auto& repfield = this->_internal_exported_symbol(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.internal.CompiledFile)
  return target;
}

size_t CompiledFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.internal.CompiledFile)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.internal.CompiledFile.Symbol exported_symbol = 5;
  total_size += 1UL * this->_internal_exported_symbol_size();
  for (const auto& msg : this->_impl_.exported_symbol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resource_name = 1;
  if (!this->_internal_resource_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_name());
  }

  // string source_path = 4;
  if (!this->_internal_source_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_path());
  }

  // .aapt.pb.Configuration config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // .aapt.pb.FileReference.Type type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompiledFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompiledFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompiledFile::GetClassData() const { return &_class_data_; }


void CompiledFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompiledFile*>(&to_msg);
  auto& from = static_cast<const CompiledFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.internal.CompiledFile)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exported_symbol_.MergeFrom(from._impl_.exported_symbol_);
  if (!from._internal_resource_name().empty()) {
    _this->_internal_set_resource_name(from._internal_resource_name());
  }
  if (!from._internal_source_path().empty()) {
    _this->_internal_set_source_path(from._internal_source_path());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::aapt::pb::Configuration::MergeFrom(
        from._internal_config());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompiledFile::CopyFrom(const CompiledFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.internal.CompiledFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledFile::IsInitialized() const {
  return true;
}

void CompiledFile::InternalSwap(CompiledFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exported_symbol_.InternalSwap(&other->_impl_.exported_symbol_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_name_, lhs_arena,
      &other->_impl_.resource_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_path_, lhs_arena,
      &other->_impl_.source_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompiledFile, _impl_.type_)
      + sizeof(CompiledFile::_impl_.type_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(CompiledFile, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompiledFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ResourcesInternal_2eproto_getter, &descriptor_table_ResourcesInternal_2eproto_once,
      file_level_metadata_ResourcesInternal_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace pb
}  // namespace aapt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aapt::pb::internal::CompiledFile_Symbol*
Arena::CreateMaybeMessage< ::aapt::pb::internal::CompiledFile_Symbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::internal::CompiledFile_Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::internal::CompiledFile*
Arena::CreateMaybeMessage< ::aapt::pb::internal::CompiledFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aapt::pb::internal::CompiledFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
