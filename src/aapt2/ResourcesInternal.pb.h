// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourcesInternal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ResourcesInternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ResourcesInternal_2eproto

#include <cstdint>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Configuration.pb.h"
#include "Resources.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ResourcesInternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ResourcesInternal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ResourcesInternal_2eproto;
namespace aapt {
namespace pb {
namespace internal {
class CompiledFile;
struct CompiledFileDefaultTypeInternal;
extern CompiledFileDefaultTypeInternal _CompiledFile_default_instance_;
class CompiledFile_Symbol;
struct CompiledFile_SymbolDefaultTypeInternal;
extern CompiledFile_SymbolDefaultTypeInternal _CompiledFile_Symbol_default_instance_;
}  // namespace internal
}  // namespace pb
}  // namespace aapt
PROTOBUF_NAMESPACE_OPEN
template<> ::aapt::pb::internal::CompiledFile* Arena::CreateMaybeMessage<::aapt::pb::internal::CompiledFile>(Arena*);
template<> ::aapt::pb::internal::CompiledFile_Symbol* Arena::CreateMaybeMessage<::aapt::pb::internal::CompiledFile_Symbol>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aapt {
namespace pb {
namespace internal {

// ===================================================================

class CompiledFile_Symbol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.internal.CompiledFile.Symbol) */ {
 public:
  inline CompiledFile_Symbol() : CompiledFile_Symbol(nullptr) {}
  ~CompiledFile_Symbol() override;
  explicit PROTOBUF_CONSTEXPR CompiledFile_Symbol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompiledFile_Symbol(const CompiledFile_Symbol& from);
  CompiledFile_Symbol(CompiledFile_Symbol&& from) noexcept
    : CompiledFile_Symbol() {
    *this = ::std::move(from);
  }

  inline CompiledFile_Symbol& operator=(const CompiledFile_Symbol& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline CompiledFile_Symbol& operator=(CompiledFile_Symbol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompiledFile_Symbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompiledFile_Symbol* internal_default_instance() {
    return reinterpret_cast<const CompiledFile_Symbol*>(
               &_CompiledFile_Symbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompiledFile_Symbol& a, CompiledFile_Symbol& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledFile_Symbol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledFile_Symbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompiledFile_Symbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompiledFile_Symbol>(arena);
  }
  CompiledFile_Symbol* New() const {
    return New(nullptr);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompiledFile_Symbol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompiledFile_Symbol& from) {
    CompiledFile_Symbol::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledFile_Symbol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.internal.CompiledFile.Symbol";
  }
  protected:
  explicit CompiledFile_Symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNameFieldNumber = 1,
    kSourceFieldNumber = 2,
  };
  // string resource_name = 1;
  void clear_resource_name();
  const std::string& resource_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_name();
  PROTOBUF_NODISCARD std::string* release_resource_name();
  void set_allocated_resource_name(std::string* resource_name);
  private:
  const std::string& _internal_resource_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_name(const std::string& value);
  std::string* _internal_mutable_resource_name();
  public:

  // .aapt.pb.SourcePosition source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::aapt::pb::SourcePosition& source() const;
  PROTOBUF_NODISCARD ::aapt::pb::SourcePosition* release_source();
  ::aapt::pb::SourcePosition* mutable_source();
  void set_allocated_source(::aapt::pb::SourcePosition* source);
  private:
  const ::aapt::pb::SourcePosition& _internal_source() const;
  ::aapt::pb::SourcePosition* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::aapt::pb::SourcePosition* source);
  ::aapt::pb::SourcePosition* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:aapt.pb.internal.CompiledFile.Symbol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_name_;
    ::aapt::pb::SourcePosition* source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ResourcesInternal_2eproto;
};
// -------------------------------------------------------------------

class CompiledFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.internal.CompiledFile) */ {
 public:
  inline CompiledFile() : CompiledFile(nullptr) {}
  ~CompiledFile() override;
  explicit PROTOBUF_CONSTEXPR CompiledFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompiledFile(const CompiledFile& from);
  CompiledFile(CompiledFile&& from) noexcept
    : CompiledFile() {
    *this = ::std::move(from);
  }

  inline CompiledFile& operator=(const CompiledFile& from) {
    if (this == &from) return *this;
    CopyFrom(from);
    return *this;
  }
  inline CompiledFile& operator=(CompiledFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompiledFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompiledFile* internal_default_instance() {
    return reinterpret_cast<const CompiledFile*>(
               &_CompiledFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompiledFile& a, CompiledFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompiledFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompiledFile>(arena);
  }
  CompiledFile* New() const {
    return New(nullptr);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompiledFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompiledFile& from) {
    CompiledFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.internal.CompiledFile";
  }
  protected:
  explicit CompiledFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CompiledFile_Symbol Symbol;

  // accessors -------------------------------------------------------

  enum : int {
    kExportedSymbolFieldNumber = 5,
    kResourceNameFieldNumber = 1,
    kSourcePathFieldNumber = 4,
    kConfigFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .aapt.pb.internal.CompiledFile.Symbol exported_symbol = 5;
  int exported_symbol_size() const;
  private:
  int _internal_exported_symbol_size() const;
  public:
  void clear_exported_symbol();
  ::aapt::pb::internal::CompiledFile_Symbol* mutable_exported_symbol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::internal::CompiledFile_Symbol >*
      mutable_exported_symbol();
  private:
  const ::aapt::pb::internal::CompiledFile_Symbol& _internal_exported_symbol(int index) const;
  ::aapt::pb::internal::CompiledFile_Symbol* _internal_add_exported_symbol();
  public:
  const ::aapt::pb::internal::CompiledFile_Symbol& exported_symbol(int index) const;
  ::aapt::pb::internal::CompiledFile_Symbol* add_exported_symbol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::internal::CompiledFile_Symbol >&
      exported_symbol() const;

  // string resource_name = 1;
  void clear_resource_name();
  const std::string& resource_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_name();
  PROTOBUF_NODISCARD std::string* release_resource_name();
  void set_allocated_resource_name(std::string* resource_name);
  private:
  const std::string& _internal_resource_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_name(const std::string& value);
  std::string* _internal_mutable_resource_name();
  public:

  // string source_path = 4;
  void clear_source_path();
  const std::string& source_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_path();
  PROTOBUF_NODISCARD std::string* release_source_path();
  void set_allocated_source_path(std::string* source_path);
  private:
  const std::string& _internal_source_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_path(const std::string& value);
  std::string* _internal_mutable_source_path();
  public:

  // .aapt.pb.Configuration config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::aapt::pb::Configuration& config() const;
  PROTOBUF_NODISCARD ::aapt::pb::Configuration* release_config();
  ::aapt::pb::Configuration* mutable_config();
  void set_allocated_config(::aapt::pb::Configuration* config);
  private:
  const ::aapt::pb::Configuration& _internal_config() const;
  ::aapt::pb::Configuration* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::aapt::pb::Configuration* config);
  ::aapt::pb::Configuration* unsafe_arena_release_config();

  // .aapt.pb.FileReference.Type type = 3;
  void clear_type();
  ::aapt::pb::FileReference_Type type() const;
  void set_type(::aapt::pb::FileReference_Type value);
  private:
  ::aapt::pb::FileReference_Type _internal_type() const;
  void _internal_set_type(::aapt::pb::FileReference_Type value);
  public:

  // @@protoc_insertion_point(class_scope:aapt.pb.internal.CompiledFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::internal::CompiledFile_Symbol > exported_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_path_;
    ::aapt::pb::Configuration* config_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ResourcesInternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompiledFile_Symbol

// string resource_name = 1;
inline void CompiledFile_Symbol::clear_resource_name() {
  _impl_.resource_name_.ClearToEmpty();
}
inline const std::string& CompiledFile_Symbol::resource_name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.Symbol.resource_name)
  return _internal_resource_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompiledFile_Symbol::set_resource_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aapt.pb.internal.CompiledFile.Symbol.resource_name)
}
inline std::string* CompiledFile_Symbol::mutable_resource_name() {
  std::string* _s = _internal_mutable_resource_name();
  // @@protoc_insertion_point(field_mutable:aapt.pb.internal.CompiledFile.Symbol.resource_name)
  return _s;
}
inline const std::string& CompiledFile_Symbol::_internal_resource_name() const {
  return _impl_.resource_name_.Get();
}
inline void CompiledFile_Symbol::_internal_set_resource_name(const std::string& value) {
  
  _impl_.resource_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CompiledFile_Symbol::_internal_mutable_resource_name() {
  
  return _impl_.resource_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CompiledFile_Symbol::release_resource_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.internal.CompiledFile.Symbol.resource_name)
  return _impl_.resource_name_.Release();
}
inline void CompiledFile_Symbol::set_allocated_resource_name(std::string* resource_name) {
  _impl_.resource_name_.SetAllocated(resource_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_name_.IsDefault()) {
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.internal.CompiledFile.Symbol.resource_name)
}

// .aapt.pb.SourcePosition source = 2;
inline bool CompiledFile_Symbol::_internal_has_source() const {
  return this != internal_default_instance() && _impl_.source_ != nullptr;
}
inline bool CompiledFile_Symbol::has_source() const {
  return _internal_has_source();
}
inline const ::aapt::pb::SourcePosition& CompiledFile_Symbol::_internal_source() const {
  const ::aapt::pb::SourcePosition* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::aapt::pb::SourcePosition&>(
      ::aapt::pb::_SourcePosition_default_instance_);
}
inline const ::aapt::pb::SourcePosition& CompiledFile_Symbol::source() const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.Symbol.source)
  return _internal_source();
}
inline void CompiledFile_Symbol::unsafe_arena_set_allocated_source(
    ::aapt::pb::SourcePosition* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aapt.pb.internal.CompiledFile.Symbol.source)
}
inline ::aapt::pb::SourcePosition* CompiledFile_Symbol::release_source() {
  
  ::aapt::pb::SourcePosition* temp = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aapt::pb::SourcePosition* CompiledFile_Symbol::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.internal.CompiledFile.Symbol.source)
  
  ::aapt::pb::SourcePosition* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::aapt::pb::SourcePosition* CompiledFile_Symbol::_internal_mutable_source() {
  
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::SourcePosition>(GetArenaForAllocation());
    _impl_.source_ = p;
  }
  return _impl_.source_;
}
inline ::aapt::pb::SourcePosition* CompiledFile_Symbol::mutable_source() {
  ::aapt::pb::SourcePosition* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:aapt.pb.internal.CompiledFile.Symbol.source)
  return _msg;
}
inline void CompiledFile_Symbol::set_allocated_source(::aapt::pb::SourcePosition* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source));
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.internal.CompiledFile.Symbol.source)
}

// -------------------------------------------------------------------

// CompiledFile

// string resource_name = 1;
inline void CompiledFile::clear_resource_name() {
  _impl_.resource_name_.ClearToEmpty();
}
inline const std::string& CompiledFile::resource_name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.resource_name)
  return _internal_resource_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompiledFile::set_resource_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aapt.pb.internal.CompiledFile.resource_name)
}
inline std::string* CompiledFile::mutable_resource_name() {
  std::string* _s = _internal_mutable_resource_name();
  // @@protoc_insertion_point(field_mutable:aapt.pb.internal.CompiledFile.resource_name)
  return _s;
}
inline const std::string& CompiledFile::_internal_resource_name() const {
  return _impl_.resource_name_.Get();
}
inline void CompiledFile::_internal_set_resource_name(const std::string& value) {
  
  _impl_.resource_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CompiledFile::_internal_mutable_resource_name() {
  
  return _impl_.resource_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CompiledFile::release_resource_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.internal.CompiledFile.resource_name)
  return _impl_.resource_name_.Release();
}
inline void CompiledFile::set_allocated_resource_name(std::string* resource_name) {
  _impl_.resource_name_.SetAllocated(resource_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_name_.IsDefault()) {
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.internal.CompiledFile.resource_name)
}

// .aapt.pb.Configuration config = 2;
inline bool CompiledFile::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool CompiledFile::has_config() const {
  return _internal_has_config();
}
inline const ::aapt::pb::Configuration& CompiledFile::_internal_config() const {
  const ::aapt::pb::Configuration* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::aapt::pb::Configuration&>(
      ::aapt::pb::_Configuration_default_instance_);
}
inline const ::aapt::pb::Configuration& CompiledFile::config() const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.config)
  return _internal_config();
}
inline void CompiledFile::unsafe_arena_set_allocated_config(
    ::aapt::pb::Configuration* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aapt.pb.internal.CompiledFile.config)
}
inline ::aapt::pb::Configuration* CompiledFile::release_config() {
  
  ::aapt::pb::Configuration* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aapt::pb::Configuration* CompiledFile::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:aapt.pb.internal.CompiledFile.config)
  
  ::aapt::pb::Configuration* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::aapt::pb::Configuration* CompiledFile::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Configuration>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::aapt::pb::Configuration* CompiledFile::mutable_config() {
  ::aapt::pb::Configuration* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:aapt.pb.internal.CompiledFile.config)
  return _msg;
}
inline void CompiledFile::set_allocated_config(::aapt::pb::Configuration* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.internal.CompiledFile.config)
}

// .aapt.pb.FileReference.Type type = 3;
inline void CompiledFile::clear_type() {
  _impl_.type_ = 0;
}
inline ::aapt::pb::FileReference_Type CompiledFile::_internal_type() const {
  return static_cast< ::aapt::pb::FileReference_Type >(_impl_.type_);
}
inline ::aapt::pb::FileReference_Type CompiledFile::type() const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.type)
  return _internal_type();
}
inline void CompiledFile::_internal_set_type(::aapt::pb::FileReference_Type value) {
  
  _impl_.type_ = value;
}
inline void CompiledFile::set_type(::aapt::pb::FileReference_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:aapt.pb.internal.CompiledFile.type)
}

// string source_path = 4;
inline void CompiledFile::clear_source_path() {
  _impl_.source_path_.ClearToEmpty();
}
inline const std::string& CompiledFile::source_path() const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.source_path)
  return _internal_source_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompiledFile::set_source_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aapt.pb.internal.CompiledFile.source_path)
}
inline std::string* CompiledFile::mutable_source_path() {
  std::string* _s = _internal_mutable_source_path();
  // @@protoc_insertion_point(field_mutable:aapt.pb.internal.CompiledFile.source_path)
  return _s;
}
inline const std::string& CompiledFile::_internal_source_path() const {
  return _impl_.source_path_.Get();
}
inline void CompiledFile::_internal_set_source_path(const std::string& value) {
  
  _impl_.source_path_.Set(value, GetArenaForAllocation());
}
inline std::string* CompiledFile::_internal_mutable_source_path() {
  
  return _impl_.source_path_.Mutable(GetArenaForAllocation());
}
inline std::string* CompiledFile::release_source_path() {
  // @@protoc_insertion_point(field_release:aapt.pb.internal.CompiledFile.source_path)
  return _impl_.source_path_.Release();
}
inline void CompiledFile::set_allocated_source_path(std::string* source_path) {
  _impl_.source_path_.SetAllocated(source_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_path_.IsDefault()) {
    _impl_.source_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.internal.CompiledFile.source_path)
}

// repeated .aapt.pb.internal.CompiledFile.Symbol exported_symbol = 5;
inline int CompiledFile::_internal_exported_symbol_size() const {
  return _impl_.exported_symbol_.size();
}
inline int CompiledFile::exported_symbol_size() const {
  return _internal_exported_symbol_size();
}
inline void CompiledFile::clear_exported_symbol() {
  _impl_.exported_symbol_.Clear();
}
inline ::aapt::pb::internal::CompiledFile_Symbol* CompiledFile::mutable_exported_symbol(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.internal.CompiledFile.exported_symbol)
  return _impl_.exported_symbol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::internal::CompiledFile_Symbol >*
CompiledFile::mutable_exported_symbol() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.internal.CompiledFile.exported_symbol)
  return &_impl_.exported_symbol_;
}
inline const ::aapt::pb::internal::CompiledFile_Symbol& CompiledFile::_internal_exported_symbol(int index) const {
  return _impl_.exported_symbol_.Get(index);
}
inline const ::aapt::pb::internal::CompiledFile_Symbol& CompiledFile::exported_symbol(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.internal.CompiledFile.exported_symbol)
  return _internal_exported_symbol(index);
}
inline ::aapt::pb::internal::CompiledFile_Symbol* CompiledFile::_internal_add_exported_symbol() {
  return _impl_.exported_symbol_.Add();
}
inline ::aapt::pb::internal::CompiledFile_Symbol* CompiledFile::add_exported_symbol() {
  ::aapt::pb::internal::CompiledFile_Symbol* _add = _internal_add_exported_symbol();
  // @@protoc_insertion_point(field_add:aapt.pb.internal.CompiledFile.exported_symbol)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::internal::CompiledFile_Symbol >&
CompiledFile::exported_symbol() const {
  // @@protoc_insertion_point(field_list:aapt.pb.internal.CompiledFile.exported_symbol)
  return _impl_.exported_symbol_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace pb
}  // namespace aapt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ResourcesInternal_2eproto
